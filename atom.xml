<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ray&#39;s blog</title>
  
  <subtitle>Coding...</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jiawea.github.io/"/>
  <updated>2024-03-09T09:05:20.131Z</updated>
  <id>https://jiawea.github.io/</id>
  
  <author>
    <name>Ray Wong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>clickhouse时序数据应用</title>
    <link href="https://jiawea.github.io/2024/03/09/clickhouse/"/>
    <id>https://jiawea.github.io/2024/03/09/clickhouse/</id>
    <published>2024-03-09T07:30:30.000Z</published>
    <updated>2024-03-09T09:05:20.131Z</updated>
    
    <content type="html"><![CDATA[<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><ul><li>绝大多数请求都是用于读访问的，数据一次写入，多次查询</li><li>数据需要以大批次（大于1000行）进行更新，而不是单行更新；或者根本没有更新操作</li><li>数据只是添加到数据库，没有必要修改</li><li>读取数据时，会从数据库中提取出大量的行，但只用到一小部分列</li><li>表很“宽”，即表中包含大量的列</li><li>查询频率相对较低（通常每台服务器每秒查询数百次或更少）</li><li>对于简单查询，允许大约50毫秒的延迟</li><li>列的值是比较小的数值和短字符串（例如，每个URL只有60个字节）</li><li>在处理单个查询时需要高吞吐量（每台服务器每秒高达数十亿行）</li></ul><a id="more"></a><ul><li>不需要事务</li><li>数据一致性要求较低</li></ul><h4 id="业务场景"><a href="#业务场景" class="headerlink" title="业务场景"></a>业务场景</h4><p>流量分析、精准营销、广告实时竞价、BI 报表分析、用户行为分析、日志分析、实时大屏等。</p><ul><li>数据仓库：ClickHouse 可以快速地处理大量的数据，支持高并发查询和复杂的聚合分析，是数据仓库和数据分析的首选工具。</li><li>实时数据分析：ClickHouse 支持实时数据分析和实时查询，可以快速地处理实时数据流，是实时数据分析和实时监控的首选工具。</li><li>时序数据存储：ClickHouse 支持时序数据存储和时序数据分析，可以快速地处理时间序列数据，是时序数据存储和时序数据分析的首选工具。</li><li>数据可视化：ClickHouse 支持数据可视化和报表生成，可以快速地生成各种类型的报表和图表，是数据可视化和报表生成的首选工具。</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>没有完整的事务支持；</li><li>不支持分词查询；</li><li>缺少高频率，低延迟的修改或删除已存在数据的能力。仅能用于批量删除或修改数据；</li><li>不擅长 join 操作；</li><li>不支持高并发，官方建议qps为100。原因： ClickHouse 将数据划分为多个 partition，每个 partition 再进一步划分为多个 index_granularity(索引粒度)，然后通过多个 CPU核心分别处理其中的一部分来实现并行数据处理。在这种设计下， 单条 Query 就能利用整机所有 CPU。 极致的并行处理能力，极大的降低了查询延时。所以，ClickHouse 即使对于大量数据的查询也能够化整为零平行处理。但是有一个弊端就是对于单条查询使用多 cpu，就不利于同时并发多条查询。所以对于高 qps 的查询业务， ClickHouse 并不是强项。</li></ul><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li><p>查询快</p><pre><code>利用存储引擎的特殊设计充分减少磁盘I/O对查询速度的影响。从用户提交一条SQL语句进行查询到最终输出结果的过程中，大量的时间是消耗在了磁盘I/O上，在很多情况下，I/O所占用的时间可以达到整个时间的90%以上。对存储引擎磁盘I/O的优化可以获得非常大的收益。ClickHouse的存储引擎设计中大量优化的目的也是为了减少磁盘I/O。</code></pre><ul><li>列存</li><li>预排序：在实现范围查找时，可以将大量的随机读转换为顺序读，从而有效提高I/O效率，降低范围查询时的I/O时间；</li><li>数据压缩：可以减少读取和写入的数据量，从而减少I/O时间。</li><li>向量化引擎，尽可能多地使用内置函数</li><li>尽可能避免Join操作，可以用Spark替代</li><li>ClickHouse 会在内存中进行 GROUP BY，并且使用 HashTable 装载数据。</li><li>索引</li><li>多线程和分布式</li><li><p>算法：ClickHouse针对不同的应用场景，选择不同的算法：</p><p>对于常量字符串查询，使用volnitsky算法<br>对于非常量字符串，使用CPU的向量化执行SIMD，进行暴力优化<br>对于字符串正则匹配，使用re2和hyperscan算法</p></li></ul></li><li><p>写入性能好</p><ul><li>列存</li><li>数据压缩：能够有效地减少数据的存储空间，从而提高写入性能</li><li>分布式架构</li><li>多线程写入：ClickHouse采用多线程写入机制，能够同时处理多个写入请求，从而提高写入性能。</li><li><p>LSM-Tree存储结构。<br>先明白一个测试数据：磁盘顺序读写和随机读写的性能差距大概是1千到5千倍之间<br>连续 I/O 顺序读写，磁头几乎不用换道，或者换道的时间很短，性能很高，比如0.03 * 2000 MB /s<br>随机 I/O 随机读写，会导致磁头不停地换道，造成效率的极大降低，0.03MB/s</p><pre><code>ClickHouse中的MergeTree也是类LSM树的思想，日志结构合并树，但不是树，而是利用磁盘顺序读写能力，实现一个多层读写的存储结构 是一种分层，有序，面向磁盘的数据结构，核心思想是利用了磁盘批量的顺序写要远比随机写性能高出很多 大大提升了数据的写入能力。充分利用了磁盘顺序写的特性，实现高吞吐写能力，数据写入后定期在后台Compaction。在数据导入时全部是顺序append写，在后台合并时也是多个段merge sort后顺序写回磁盘。官方公开benchmark测试显示能够达到50MB-200MB/s的写入吞吐能力，按照每行100Byte估算，大约相当于50W-200W条/s的写入速度。</code></pre></li></ul></li></ul><h3 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h3><h4 id="MergeTree"><a href="#MergeTree" class="headerlink" title="MergeTree"></a>MergeTree</h4><p>MergeTree 表引擎主要用于海量数据分析，支持数据分区、主键索引、稀疏索引和数据 TTL 等。</p><ul><li>列式存储：只读取需要的列，节省 IO 和 CPU 资源。</li><li>数据分区：按照日期或其他条件将数据分割成多个部分，方便管理和查询。</li><li>稀疏主键索引：按照主键或排序键对数据进行排序和索引，加速范围查询。</li><li>次级跳过索引：根据列的最小值和最大值等统计信息跳过不符合条件的数据，进一步提高查询效率。</li><li>数据合并：后台定期将多个小的数据部分合并成一个大的数据部分，减少数据冗余和碎片</li></ul><p>MergeTree 引擎还有一些变种，如 ReplicatedMergeTree、AggregatingMergeTree 和 SummingMergeTree 等，它们在基本的 MergeTree 功能上增加了数据复制、数据聚合、数据求和等特性。</p><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><h4 id="一级索引"><a href="#一级索引" class="headerlink" title="一级索引"></a>一级索引</h4><p>一级索引是稀疏索引，意思就是说：每一段数据生成一条索引记录，而不是每一条数据都生成索引， 如果是每一条数据都生成索引，则是稠密索引。用一个形象的例子来说明：如果把MergeTree比作一本书，那么稀疏索引就好比是这本书的一级章节目录。一级章节目录不会具体对应到每个字的位置，只会记录每个章节的起始页码。</p><p>MergeTree 的主键使用 PRIMARY KEY 定义，待主键定义之后，MergeTree 会依据 index_granularity 间隔（默认 8192 行），为数据表生成一级索引并保存至 primary.idx 文件内。<br>稀疏索引的优势是显而易见的，它仅需使用少量的索引标记就能够记录大量数据的区间位置信息，且数据量越大优势越为明显。以默认的索引粒度（8192）为例，MergeTree只需要12208行索引标记就能为1亿行数据记录提供索引。由于稀疏索引占用空间小，所以primary.idx内的索引数据常驻内存，取用速度自然极快。</p><p>在 ClickHouse 中，一级索引常驻内存。总的来说：一级索引和标记文件一一对齐，两个 索引标记之间的数据，就是一个数据区间，在数据文件中，这个数据区间的所有数据，生成一个压缩数据块。每列压缩数据文件，存储每一列的数据，每一列字段都有独立的数据文件，每一列都有对应的标记文件，保存了列压缩文件中数据的偏移量信息，与稀疏索引对齐，又与压缩文件对应，建立了稀疏索引与数据文件的映射关系。不能常驻内存，使用LRU缓存策略加快其取用速度。</p><p>需要注意的是：ClickHouse 的主键索引与 MySQL 等数据库不同，它并不用于去重，即便 primary key 相同的行，也可以同时存在于数据库中。 要想实现去重效果，需要结合具体的表引擎 ReplacingMergeTree、CollapsingMergeTree、VersionedCollapsingMergeTree 实现。</p><h4 id="二级索引"><a href="#二级索引" class="headerlink" title="二级索引"></a>二级索引</h4><p>二级索引：又称之为跳数索引。目的和一级索引一样，是为了减少待搜寻的数据的范围。</p><p>跳数索引的默认是关闭的，需要通过参数来开启，索引生成粒度由 granularity 控制，如果生成了二级索引，则会在分区目录下生成额外的：skp_idx_[Column].idx 与 skp_idx_[Column].mrk 文件。</p><p>跳数索引的生成规则：按照特定规则每隔 granularity 个 index_granularity 条数据，就会生成一条跳数索引。比如 minmax 跳数索引，生成的是：granularity 个 index_granularity 条数据内的最大值最小值生成一条索引，如果将来需要针对构建二级索引的这个字段求最大值最小值，则可以帮助提高效率。</p><p>跳数索引一共支持四种类型：minmax(最大最小)、set(去重集合)、 ngrambf_v1（ngram 分词布隆索引）和 tokenbf_v1（标点符号分词布隆索引），一张数据表支持同时声明多个跳数索引。</p><h3 id="实际案例"><a href="#实际案例" class="headerlink" title="实际案例"></a>实际案例</h3><p>笔者在一次业务开发中，使用了 <code>clickhouse</code> 存储设备的时序数据，下面通过实际案例测试了一下 <code>clickhouse</code> 在此业务场景下的性能、压缩率。</p><h4 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h4><p>集群高可用<br>内核版本：22.8.5.1<br>计算节点类型：标准型<br>计算节点规格：32核128GB<br>计算节点数量：2<br>计算节点存储：增强型SSD云硬盘500GB<br>ZK节点规格：4核16GB<br>ZK节点存储：增强型SSD云硬盘100GB<br>ZK节点数量：3</p><h4 id="测试数据写入"><a href="#测试数据写入" class="headerlink" title="测试数据写入"></a>测试数据写入</h4><p>笔者自己写了一个伪造数据的脚本，以 <code>100</code> 万台设备为维度，总共写入了 <code>20</code> 亿条数据，平均每条数据将近 <code>1k</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> event_message <span class="keyword">ON</span> CLUSTER default_cluster;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> event_message.event <span class="keyword">ON</span> CLUSTER default_cluster (</span><br><span class="line">    <span class="string">`created_at`</span> DateTime <span class="keyword">DEFAULT</span> <span class="keyword">now</span>() <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span> CODEC(Delta(<span class="number">1</span>), ZSTD(<span class="number">1</span>)),</span><br><span class="line">    <span class="string">`ts`</span> DateTime64(<span class="number">3</span>, <span class="string">'Asia/Shanghai'</span>) <span class="keyword">COMMENT</span> <span class="string">'事件上报时间'</span> CODEC(Delta(<span class="number">8</span>), ZSTD(<span class="number">1</span>)),</span><br><span class="line">    <span class="string">`uuid`</span> <span class="keyword">String</span>,</span><br><span class="line">    <span class="string">`event_id`</span> <span class="keyword">String</span> <span class="keyword">COMMENT</span> <span class="string">'事件id'</span> CODEC(ZSTD(<span class="number">1</span>)),</span><br><span class="line">    <span class="string">`app_id`</span> UInt64,</span><br><span class="line">    <span class="string">`user_id`</span> UInt64,</span><br><span class="line">    <span class="string">`type`</span> UInt8 <span class="keyword">COMMENT</span> <span class="string">'事件类型 1告警'</span> CODEC(ZSTD(<span class="number">1</span>)),</span><br><span class="line">    <span class="string">`event_type`</span> Int64 <span class="keyword">COMMENT</span> <span class="string">'上报数据内容中的事件类型'</span> CODEC(ZSTD(<span class="number">1</span>)),</span><br><span class="line">    <span class="string">`event_end`</span> UInt64 CODEC(Delta(<span class="number">1</span>), ZSTD(<span class="number">1</span>)),</span><br><span class="line">    <span class="string">`image_url`</span> <span class="keyword">String</span> CODEC(ZSTD(<span class="number">1</span>)),</span><br><span class="line">    <span class="string">`video_url`</span> <span class="keyword">String</span> CODEC(ZSTD(<span class="number">1</span>)),</span><br><span class="line">    <span class="string">`video_start`</span> UInt64 CODEC(Delta(<span class="number">1</span>), ZSTD(<span class="number">1</span>)),</span><br><span class="line">    <span class="string">`video_end`</span> UInt64 CODEC(Delta(<span class="number">1</span>), ZSTD(<span class="number">1</span>)),</span><br><span class="line">    <span class="string">`status`</span> UInt8 <span class="keyword">COMMENT</span> <span class="string">'状态 1未读 2已读 3删除'</span> CODEC(ZSTD(<span class="number">1</span>)),</span><br><span class="line">    <span class="string">`channel`</span> Nullable(Int64) <span class="keyword">COMMENT</span> <span class="string">'通道号'</span></span><br><span class="line">) <span class="keyword">ENGINE</span> = ReplicatedMergeTree(<span class="string">'/clickhouse/tables/&#123;layer&#125;-&#123;shard&#125;/event'</span>, <span class="string">'&#123;replica&#125;'</span>)</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> toYYYYMMDD(ts)</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="keyword">uuid</span>, ts) <span class="keyword">ORDER</span> <span class="keyword">BY</span> (<span class="keyword">uuid</span>, ts, event_type) TTL toDateTime(ts) + toIntervalMonth(<span class="number">3</span>) <span class="keyword">SETTINGS</span> index_granularity = <span class="number">2048</span></span><br></pre></td></tr></table></figure><ul><li>数据示例</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ed069b3366a6 :) <span class="keyword">select</span> * <span class="keyword">from</span> event_message.event <span class="keyword">limit</span> <span class="number">1</span>\G</span><br><span class="line"></span><br><span class="line"><span class="keyword">Row</span> <span class="number">1</span>:</span><br><span class="line">──────</span><br><span class="line">created_at:  <span class="number">2024</span><span class="number">-01</span><span class="number">-11</span> <span class="number">17</span>:<span class="number">43</span>:<span class="number">39.689</span></span><br><span class="line">ts:          <span class="number">2023</span><span class="number">-12</span><span class="number">-13</span> <span class="number">14</span>:<span class="number">38</span>:<span class="number">25.003</span></span><br><span class="line"><span class="keyword">uuid</span>:        <span class="number">3301000000189</span>xxx</span><br><span class="line">event_id:    <span class="number">1702449505</span></span><br><span class="line">app_id:      <span class="number">9</span></span><br><span class="line">user_id:     <span class="number">114928</span></span><br><span class="line"><span class="keyword">type</span>:        <span class="number">1</span></span><br><span class="line">event_type:  <span class="number">3</span></span><br><span class="line">event_end:   <span class="number">1702449804</span></span><br><span class="line">image_url:   <span class="keyword">http</span>://s-cn-example-xxx.com/xxx...</span><br><span class="line">video_url:   <span class="keyword">http</span>://s-cn-example-xxx.com/xxx...</span><br><span class="line">video_start: <span class="number">1702449501</span></span><br><span class="line">video_end:   <span class="number">1702449505</span></span><br><span class="line"><span class="keyword">status</span>:      <span class="number">1</span></span><br><span class="line">channel:     <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li>批量异步写入</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[ops@VM-0-45-tencentos event]$ ./ck_event_tool -addr "10.32.32.10:9000" -file ./d3301000000044702.csv -num 20000</span><br><span class="line">table: event_idx_20, sql len: 17415225 byte, AsyncInsert took 116454 microseconds</span><br><span class="line">table: event_idx_20, sql len: 17415162 byte, AsyncInsert took 51526 microseconds</span><br><span class="line">table: event_idx_20, sql len: 17415125 byte, AsyncInsert took 46664 microseconds</span><br><span class="line">table: event_idx_20, sql len: 17415135 byte, AsyncInsert took 52592 microseconds</span><br></pre></td></tr></table></figure><p>写入速度能达到 <strong>200M/s</strong>，这点已经满足业务数据写入的需求了。</p><center><img src="/static/blogImg/ck-alter.png" alt="监控"></center><h3 id="基准测试"><a href="#基准测试" class="headerlink" title="基准测试"></a>基准测试</h3><h4 id="SQL-1"><a href="#SQL-1" class="headerlink" title="SQL 1"></a>SQL 1</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        ts,</span><br><span class="line">        argMax(event_id, event_id) <span class="keyword">AS</span> event_id,</span><br><span class="line">        argMax(app_id, app_id) <span class="keyword">AS</span> app_id,</span><br><span class="line">        argMax(user_id, user_id) <span class="keyword">AS</span> user_id,</span><br><span class="line">        argMax(<span class="keyword">type</span>, <span class="keyword">type</span>) <span class="keyword">AS</span> <span class="keyword">type</span>,</span><br><span class="line">        argMax(event_type, event_type) <span class="keyword">AS</span> event_type,</span><br><span class="line">        argMax(event_end, event_end) <span class="keyword">AS</span> event_end,</span><br><span class="line">        argMax(image_url, image_url) <span class="keyword">AS</span> image_url,</span><br><span class="line">        argMax(video_url, video_url) <span class="keyword">AS</span> video_url,</span><br><span class="line">        argMax(video_start, video_start) <span class="keyword">AS</span> video_start,</span><br><span class="line">        argMax(video_end, video_end) <span class="keyword">AS</span> video_end,</span><br><span class="line">        argMax(<span class="keyword">status</span>, created_at) <span class="keyword">AS</span> <span class="keyword">status</span>,</span><br><span class="line">        argMax(channel, channel) <span class="keyword">AS</span> channel</span><br><span class="line">    <span class="keyword">FROM</span> event_message.event</span><br><span class="line">    <span class="keyword">WHERE</span> ((ts &gt;= <span class="string">'2024-01-24 00:00:00'</span>) <span class="keyword">AND</span> (ts &lt;= <span class="string">'2024-01-24 23:59:59'</span>)) <span class="keyword">AND</span> (<span class="keyword">uuid</span> = <span class="string">'3301000000044703'</span>)</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">        ts,</span><br><span class="line">        <span class="keyword">uuid</span></span><br><span class="line">    <span class="keyword">HAVING</span> (<span class="keyword">status</span> != <span class="number">3</span>) <span class="keyword">AND</span> (image_url != <span class="string">''</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> ts <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> set. Elapsed: <span class="number">0.070</span> sec. Processed <span class="number">32.64</span> thousand <span class="keyword">rows</span>, <span class="number">22.19</span> MB (<span class="number">468.13</span> thousand <span class="keyword">rows</span>/s., <span class="number">318.19</span> MB/s.)</span><br></pre></td></tr></table></figure><h4 id="SQL-2"><a href="#SQL-2" class="headerlink" title="SQL 2"></a>SQL 2</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">count</span>(*)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        ts,</span><br><span class="line">        argMax(event_type, event_type) <span class="keyword">AS</span> event_type,</span><br><span class="line">        argMax(image_url, image_url) <span class="keyword">AS</span> image_url,</span><br><span class="line">        argMax(channel, channel) <span class="keyword">AS</span> channel,</span><br><span class="line">        argMax(<span class="keyword">status</span>, created_at) <span class="keyword">AS</span> <span class="keyword">status</span></span><br><span class="line">    <span class="keyword">FROM</span> event_message.event</span><br><span class="line">    <span class="keyword">WHERE</span> ((ts &gt;= <span class="string">'2024-01-24 00:00:00'</span>) <span class="keyword">AND</span> (ts &lt;= <span class="string">'2024-01-24 23:59:59'</span>)) <span class="keyword">AND</span> (<span class="keyword">uuid</span> = <span class="string">'3301000000044703'</span>)</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">        ts,</span><br><span class="line">        <span class="keyword">uuid</span></span><br><span class="line">    <span class="keyword">HAVING</span> <span class="keyword">status</span> <span class="keyword">IN</span> (<span class="number">1</span>,<span class="number">2</span>) <span class="keyword">AND</span> image_url != <span class="string">''</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">Query</span> <span class="keyword">id</span>: <span class="number">5726</span>ca46<span class="number">-564</span>f<span class="number">-4</span>ee3-bc6c<span class="number">-306</span>b97b02669</span><br><span class="line"></span><br><span class="line">┌─<span class="keyword">count</span>()─┐</span><br><span class="line">│    <span class="number">5549</span> │</span><br><span class="line">└─────────┘</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="keyword">rows</span> <span class="keyword">in</span> set. Elapsed: <span class="number">0.036</span> sec. Processed <span class="number">32.64</span> thousand <span class="keyword">rows</span>, <span class="number">10.47</span> MB (<span class="number">899.62</span> thousand <span class="keyword">rows</span>/s., <span class="number">288.52</span> MB/s.)</span><br></pre></td></tr></table></figure><h4 id="SQL-3"><a href="#SQL-3" class="headerlink" title="SQL 3"></a>SQL 3</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        ts,</span><br><span class="line">        argMax(event_type, event_type) <span class="keyword">AS</span> event_type,</span><br><span class="line">        argMax(image_url, image_url) <span class="keyword">AS</span> image_url,</span><br><span class="line">        argMax(<span class="keyword">status</span>, created_at) <span class="keyword">AS</span> <span class="keyword">status</span></span><br><span class="line">    <span class="keyword">FROM</span> event_message.event</span><br><span class="line">    <span class="keyword">WHERE</span> <span class="keyword">uuid</span> = <span class="string">'3301000000044704'</span></span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">        ts,</span><br><span class="line">        <span class="keyword">uuid</span></span><br><span class="line">    <span class="keyword">HAVING</span> (<span class="keyword">status</span> != <span class="number">3</span>) <span class="keyword">AND</span> (image_url != <span class="string">''</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> ts <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="keyword">rows</span> <span class="keyword">in</span> set. Elapsed: <span class="number">0.114</span> sec. Processed <span class="number">350.34</span> thousand <span class="keyword">rows</span>, <span class="number">210.66</span> MB (<span class="number">3.08</span> million <span class="keyword">rows</span>/s., <span class="number">1.85</span> GB/s.)</span><br></pre></td></tr></table></figure><h4 id="SQL-4"><a href="#SQL-4" class="headerlink" title="SQL 4"></a>SQL 4</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="keyword">count</span>(*) <span class="keyword">AS</span> total,</span><br><span class="line">    toDate(ts) <span class="keyword">AS</span> d,</span><br><span class="line">    <span class="keyword">status</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        ts,</span><br><span class="line">        argMax(event_type, event_type) <span class="keyword">AS</span> event_type,</span><br><span class="line">        argMax(image_url, image_url) <span class="keyword">AS</span> image_url,</span><br><span class="line">        argMax(<span class="keyword">status</span>, created_at) <span class="keyword">AS</span> <span class="keyword">status</span></span><br><span class="line">    <span class="keyword">FROM</span> event_message.event_idx_20</span><br><span class="line">    <span class="keyword">WHERE</span> ((ts &gt;= <span class="string">'2024-01-24 00:00:00'</span>) <span class="keyword">AND</span> (ts &lt;= <span class="string">'2024-01-27 23:59:59'</span>)) <span class="keyword">AND</span> (<span class="keyword">uuid</span> = <span class="string">'3301000000044703'</span>)</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">        ts,</span><br><span class="line">        <span class="keyword">uuid</span></span><br><span class="line">    <span class="keyword">HAVING</span> (<span class="keyword">status</span> != <span class="number">3</span>) <span class="keyword">AND</span> (image_url != <span class="string">''</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">    d,</span><br><span class="line">    <span class="keyword">status</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Query</span> <span class="keyword">id</span>: <span class="number">28</span>bdb597<span class="number">-9</span>d81<span class="number">-4</span>db6<span class="number">-8</span>baa-cd5db4d11dea</span><br><span class="line"></span><br><span class="line">┌─total─┬──────────d─┬─<span class="keyword">status</span>─┐</span><br><span class="line">│     <span class="number">1</span> │ <span class="number">2024</span><span class="number">-01</span><span class="number">-27</span> │      <span class="number">2</span> │</span><br><span class="line">│  <span class="number">5549</span> │ <span class="number">2024</span><span class="number">-01</span><span class="number">-24</span> │      <span class="number">1</span> │</span><br><span class="line">│    <span class="number">73</span> │ <span class="number">2024</span><span class="number">-01</span><span class="number">-27</span> │      <span class="number">1</span> │</span><br><span class="line">│    <span class="number">93</span> │ <span class="number">2024</span><span class="number">-01</span><span class="number">-26</span> │      <span class="number">1</span> │</span><br><span class="line">│   <span class="number">183</span> │ <span class="number">2024</span><span class="number">-01</span><span class="number">-25</span> │      <span class="number">1</span> │</span><br><span class="line">└───────┴────────────┴────────┘</span><br><span class="line"></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> set. Elapsed: <span class="number">0.043</span> sec. Processed <span class="number">26.63</span> thousand <span class="keyword">rows</span>, <span class="number">6.19</span> MB (<span class="number">617.89</span> thousand <span class="keyword">rows</span>/s., <span class="number">143.74</span> MB/s.)</span><br></pre></td></tr></table></figure><h4 id="基准测试结果"><a href="#基准测试结果" class="headerlink" title="基准测试结果"></a>基准测试结果</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it ck-server ClickHouse-benchmark -h 10.32.32.10 --user &quot;&quot; --password &quot;&quot; -c 50 --query &quot;&quot;</span><br></pre></td></tr></table></figure><h5 id="1分片2节点、32核128GB、SSD云硬盘500GB"><a href="#1分片2节点、32核128GB、SSD云硬盘500GB" class="headerlink" title="1分片2节点、32核128GB、SSD云硬盘500GB"></a>1分片2节点、32核128GB、SSD云硬盘500GB</h5><p><code>index_granularity = 2048</code></p><ul><li>150并发</li></ul><table><thead><tr><th style="text-align:center">SQL</th><th style="text-align:center">P50（秒）</th><th style="text-align:center">P70（秒）</th><th style="text-align:center">P80（秒）</th><th style="text-align:center">P90（秒）</th><th style="text-align:center">P95（秒）</th><th style="text-align:center">P99（秒）</th><th style="text-align:center">P99.9（秒）</th></tr></thead><tbody><tr><td style="text-align:center">SQL 1</td><td style="text-align:center">0.146</td><td style="text-align:center">0.164</td><td style="text-align:center">0.176</td><td style="text-align:center">0.192</td><td style="text-align:center">0.207</td><td style="text-align:center">0.238</td><td style="text-align:center">0.280</td></tr><tr><td style="text-align:center">SQL 2</td><td style="text-align:center">0.079</td><td style="text-align:center">0.092</td><td style="text-align:center">0.100</td><td style="text-align:center">0.113</td><td style="text-align:center">0.124</td><td style="text-align:center">0.147</td><td style="text-align:center">0.177</td></tr><tr><td style="text-align:center">SQL 3</td><td style="text-align:center">0.209</td><td style="text-align:center">0.303</td><td style="text-align:center">0.357</td><td style="text-align:center">0.421</td><td style="text-align:center">0.496</td><td style="text-align:center">0.661</td><td style="text-align:center">0.700</td></tr><tr><td style="text-align:center">SQL 4</td><td style="text-align:center">0.135</td><td style="text-align:center">0.155</td><td style="text-align:center">0.168</td><td style="text-align:center">0.186</td><td style="text-align:center">0.204</td><td style="text-align:center">0.241</td><td style="text-align:center">0.280</td></tr></tbody></table><ul><li>200并发</li></ul><table><thead><tr><th style="text-align:center">SQL</th><th style="text-align:center">P50（秒）</th><th style="text-align:center">P70（秒）</th><th style="text-align:center">P80（秒）</th><th style="text-align:center">P90（秒）</th><th style="text-align:center">P95（秒）</th><th style="text-align:center">P99（秒）</th><th style="text-align:center">P99.9（秒）</th></tr></thead><tbody><tr><td style="text-align:center">SQL 1</td><td style="text-align:center">0.198</td><td style="text-align:center">0.223</td><td style="text-align:center">0.239</td><td style="text-align:center">0.264</td><td style="text-align:center">0.285</td><td style="text-align:center">0.330</td><td style="text-align:center">0.388</td></tr><tr><td style="text-align:center">SQL 2</td><td style="text-align:center">0.107</td><td style="text-align:center">0.126</td><td style="text-align:center">0.138</td><td style="text-align:center">0.156</td><td style="text-align:center">0.173</td><td style="text-align:center">0.204</td><td style="text-align:center">0.233</td></tr><tr><td style="text-align:center">SQL 3</td><td style="text-align:center">0.395</td><td style="text-align:center">0.462</td><td style="text-align:center">0.491</td><td style="text-align:center">0.544</td><td style="text-align:center">0.580</td><td style="text-align:center">0.627</td><td style="text-align:center">0.696</td></tr><tr><td style="text-align:center">SQL 4</td><td style="text-align:center">0.180</td><td style="text-align:center">0.211</td><td style="text-align:center">0.231</td><td style="text-align:center">0.262</td><td style="text-align:center">0.300</td><td style="text-align:center">0.340</td><td style="text-align:center">0.432</td></tr></tbody></table><ul><li>250并发</li></ul><table><thead><tr><th style="text-align:center">SQL</th><th style="text-align:center">P50（秒）</th><th style="text-align:center">P70（秒）</th><th style="text-align:center">P80（秒）</th><th style="text-align:center">P90（秒）</th><th style="text-align:center">P95（秒）</th><th style="text-align:center">P99（秒）</th><th style="text-align:center">P99.9（秒）</th></tr></thead><tbody><tr><td style="text-align:center">SQL 1</td><td style="text-align:center">0.249</td><td style="text-align:center">0.281</td><td style="text-align:center">0.302</td><td style="text-align:center">0.334</td><td style="text-align:center">0.361</td><td style="text-align:center">0.416</td><td style="text-align:center">0.479</td></tr><tr><td style="text-align:center">SQL 2</td><td style="text-align:center">0.136</td><td style="text-align:center">0.161</td><td style="text-align:center">0.179</td><td style="text-align:center">0.203</td><td style="text-align:center">0.224</td><td style="text-align:center">0.271</td><td style="text-align:center">0.330</td></tr><tr><td style="text-align:center">SQL 3</td><td style="text-align:center">0.543</td><td style="text-align:center">0.669</td><td style="text-align:center">0.727</td><td style="text-align:center">0.822</td><td style="text-align:center">0.855</td><td style="text-align:center">0.909</td><td style="text-align:center">1.080</td></tr><tr><td style="text-align:center">SQL 4</td><td style="text-align:center">0.238</td><td style="text-align:center">0.259</td><td style="text-align:center">0.295</td><td style="text-align:center">0.353</td><td style="text-align:center">0.370</td><td style="text-align:center">0.444</td><td style="text-align:center">0.572</td></tr></tbody></table><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><ul><li>SQL 1<br>10 rows in set. Elapsed: 0.044 sec. Processed 10.24 thousand rows, 7.28 MB (232.86 thousand rows/s., 165.60 MB/s.)<ul><li>150 并发<br>10.32.32.10:9000, queries: 2893, QPS: 855.413, RPS: 8759429.869, MiB/s: 5940.758, result RPS: 8554.131, result MiB/s: 7.089.</li></ul></li><li>SQL 2<br>1 rows in set. Elapsed: 0.029 sec. Processed 10.24 thousand rows, 3.45 MB (357.13 thousand rows/s., 120.16 MB/s.)<ul><li>200 并发<br>10.32.32.10:9000, queries: 7049, QPS: 1639.300, RPS: 16786436.834, MiB/s: 5386.267, result RPS: 1639.300, result MiB/s: 0.013.</li></ul></li><li>SQL 4<br>5 rows in set. Elapsed: 0.049 sec. Processed 26.63 thousand rows, 6.19 MB (538.26 thousand rows/s., 125.22 MB/s.)<ul><li>200 并发<br>10.32.32.10:9000, queries: 5020, QPS: 946.233, RPS: 25196304.941, MiB/s: 5589.924, result RPS: 4731.167, result MiB/s: 0.050.</li></ul></li></ul><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ul><li>集群高可用副本同步，需要使用 ReplicatedMergeTree 引擎，否则不会同步消息</li><li>并发查询限制，默认 100，并发越高查询效率越慢，相关参数：config.xml -&gt; max_concurrent_queries<ul><li>目前调整至 300</li></ul></li><li>查询内存限制，DB::Exception: Memory limit 相关参数：users.xml -&gt; max_memory_usage<ul><li>目前调整至 25G</li></ul></li><li>根据业务情况调整主键顺序以及主键索引颗粒度</li><li>主键顺序按字段基数从小到大排序有利于压缩率</li><li>主键索引顺序问题需要通过多主键索引进行调优，原理都是基于附加表进行数据查询</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;应用场景&quot;&gt;&lt;a href=&quot;#应用场景&quot; class=&quot;headerlink&quot; title=&quot;应用场景&quot;&gt;&lt;/a&gt;应用场景&lt;/h3&gt;&lt;h4 id=&quot;使用场景&quot;&gt;&lt;a href=&quot;#使用场景&quot; class=&quot;headerlink&quot; title=&quot;使用场景&quot;&gt;&lt;/a&gt;使用场景&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;绝大多数请求都是用于读访问的，数据一次写入，多次查询&lt;/li&gt;
&lt;li&gt;数据需要以大批次（大于1000行）进行更新，而不是单行更新；或者根本没有更新操作&lt;/li&gt;
&lt;li&gt;数据只是添加到数据库，没有必要修改&lt;/li&gt;
&lt;li&gt;读取数据时，会从数据库中提取出大量的行，但只用到一小部分列&lt;/li&gt;
&lt;li&gt;表很“宽”，即表中包含大量的列&lt;/li&gt;
&lt;li&gt;查询频率相对较低（通常每台服务器每秒查询数百次或更少）&lt;/li&gt;
&lt;li&gt;对于简单查询，允许大约50毫秒的延迟&lt;/li&gt;
&lt;li&gt;列的值是比较小的数值和短字符串（例如，每个URL只有60个字节）&lt;/li&gt;
&lt;li&gt;在处理单个查询时需要高吞吐量（每台服务器每秒高达数十亿行）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://jiawea.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="clickhouse" scheme="https://jiawea.github.io/tags/clickhouse/"/>
    
  </entry>
  
  <entry>
    <title>设备影子与物模型</title>
    <link href="https://jiawea.github.io/2023/12/16/iot-shadow-property/"/>
    <id>https://jiawea.github.io/2023/12/16/iot-shadow-property/</id>
    <published>2023-12-16T09:00:36.000Z</published>
    <updated>2024-03-09T09:20:32.820Z</updated>
    
    <content type="html"><![CDATA[<h3 id="设备影子与物模型"><a href="#设备影子与物模型" class="headerlink" title="设备影子与物模型"></a>设备影子与物模型</h3><h4 id="物模型"><a href="#物模型" class="headerlink" title="物模型"></a>物模型</h4><p>物模型（Thing Specification Language）是为产品定义的数据模型，用于描述产品的功能。物模型将设备在云端从属性、服务和事件三个维度，分别描述了该实体是什么、能做什么、可以对外提供哪些信息。定义了物模型的这三个维度，即完成了产品功能的定义。</p><a id="more"></a><h4 id="设备影子"><a href="#设备影子" class="headerlink" title="设备影子"></a>设备影子</h4><p>设备影子（Device Shadow）是指在物联网设备与云端之间建立的一种虚拟设备模型，它保存了物联网设备的最新状态和控制信息，并提供了远程访问这些信息的能力。<br>简单来说，设备影子保存了设备即时状态。应用程序可对影子状态进行获取和设置。设备在线时，可直接获取到平台下发的设置指令；设备离线后，再次上线时可以主动查询影子进行配置。</p><p>主要目的：</p><ul><li>缓存设备状态：应用程序可以方便地查看设备状态，即使设备下线。</li><li>离线操作：设备影子允许应用程序和其他设备对设备状态进行操作，即使设备处于离线状态，等设备上线时主动获取期望状态进行更新。</li><li>解耦：设备影子充当了设备和应用程序之间的缓冲层，使得应用程序无需直接与设备进行通信，从而降低了设备和应用程序之间的耦合度。</li></ul><h3 id="控制模型"><a href="#控制模型" class="headerlink" title="控制模型"></a>控制模型</h3><center><img src="/static/blogImg/iot-shadow-property.jpg" alt="控制模型"></center><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><p>数据以 JSON 文档形式存储，主要包含以下属性：</p><ul><li>state<ul><li>desired 设备预期状态<br>应用程序设置的设备预期状态，可用于远程控制设备。</li><li>reported 设备报告状态<br>记录了设备当前的属性和状态信息。应用程序读取文档的该部分以确定设备的上次报告状态。</li></ul></li><li>metadata 元数据<br>存储 state 部分中每个属性更新的时间戳。</li><li>version 文档版本<br>文档每次更新时，此版本号都会递增。用于确保正在更新的文档为最新版本。更新时版本号需要设置成大于影子系统的版本号，否则会更新失败。如果不进行校验版本号，则不要带上该字段。</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"state"</span>: &#123;</span><br><span class="line">        <span class="attr">"desired"</span>: &#123;</span><br><span class="line">            <span class="attr">"human_check_switch"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">"move_track_switch"</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"reported"</span>: &#123;</span><br><span class="line">            <span class="attr">"human_check_switch"</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">"move_track_switch"</span>: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"metadata"</span>: &#123;</span><br><span class="line">        <span class="attr">"desired"</span>: &#123;</span><br><span class="line">            <span class="attr">"human_check_switch"</span>: &#123;</span><br><span class="line">                <span class="attr">"timestamp"</span>: <span class="number">1689219987</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"move_track_switch"</span>: &#123;</span><br><span class="line">                <span class="attr">"timestamp"</span>: <span class="number">1689219987</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"reported"</span>: &#123;</span><br><span class="line">            <span class="attr">"human_check_switch"</span>: &#123;</span><br><span class="line">                <span class="attr">"timestamp"</span>: <span class="number">1689219980</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"move_track_switch"</span>: &#123;</span><br><span class="line">                <span class="attr">"timestamp"</span>: <span class="number">1689219980</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"TIMESTAMP"</span>: <span class="number">1689219987</span>,</span><br><span class="line">    <span class="attr">"VERSION"</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h3><p><strong>占用空间：以一个设备有 30 个属性为例，大约需要 4.2K 空间，30万个设备则需要 1.2G， 1百万个设备则需要 4G</strong></p><p>对比了 Redis、MongoDB、COS</p><ul><li>MongoDB：需要引入新技术栈，有学习、维护成本</li><li>COS：费用不低，心跳机制每天读写请求量好几亿</li></ul><p>考虑到目前现有的业务以及对存储引擎的读写操作并发要求不低、使用成本，决定使用 Redis 进行存储。</p><h3 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h3><p>下面以摄像机设备为例，说明设备、设备影子以及应用程序之间的通信，主要介绍设备主动上报状态、应用程序（SDK）改变设备状态、设备主动获取影子内容，和设备、应用程序主动删除影子属性。</p><h4 id="设备主动上报"><a href="#设备主动上报" class="headerlink" title="设备主动上报"></a>设备主动上报</h4><p>设备登录在线时，主动上报设备状态到影子。应用程序主动获取设备影子状态。</p><center><img src="/static/blogImg/device-report.jpg" alt="控制模型"></center><ol><li>设备通过 Topic 上报最新状态到设备影子。如果携带 version ，影子系统则判断根据版本号决定是否更新，否则直接覆盖更新。</li><li>设备影子文件更新后，设备影子会返回结果给设备，即发送消息到设备订阅的 Topic 。</li><li>如果更新失败，设备则需要重新上报。</li></ol><h4 id="应用程序改变设备状态"><a href="#应用程序改变设备状态" class="headerlink" title="应用程序改变设备状态"></a>应用程序改变设备状态</h4><p>设备在线时，应用程序更新设备期望状态到影子，设备影子将指令下发至设备，如果设备下线，则当设备上线时主动获取影子信息，根据期望状态进行更新。</p><center><img src="/static/blogImg/app-set.jpg" alt="控制模型"></center><ol><li>应用程序通过 HTTP 或者 MQTT 更改期望状态，开启人脸检测</li><li>平台设备影子文件更新</li><li>影子文件更新成功后，下发指令给设备（需要重试机制），设备订阅 Topic 获取期望状态进行更新。<ol><li>设备在线：根据上面的 desired 部分的值，将人脸检测进行开启。（设备可根据时间戳决定是否更新）</li><li>设备不在线：上线时主动获取设备影子期望状态进行更新</li></ol></li><li>设备更新成功后，使用 Topic 上报最新状态到影子。影子更新成功后则返回结果给设备。（流程参考 3.5.1 设备上报状态）</li><li>设备上报完最新状态后，影子系统可自动清空 desired </li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"state"</span>: &#123;</span><br><span class="line">        <span class="attr">"reported"</span>: &#123;</span><br><span class="line">            <span class="attr">"face_check_switch"</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">"voice_check_switch"</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">"move_track_switch"</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"desired"</span>: &#123;</span><br><span class="line">            <span class="attr">"face_check_switch"</span>: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="attr">"metadata"</span>: &#123;</span><br><span class="line">        <span class="attr">"reported"</span>: &#123;</span><br><span class="line">            <span class="attr">"face_check_switch"</span>: &#123;</span><br><span class="line">                <span class="attr">"timestamp"</span>: <span class="number">1689303208</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, </span><br><span class="line">        <span class="attr">"desired"</span>: &#123;</span><br><span class="line">            <span class="attr">"face_check_switch"</span>: &#123;</span><br><span class="line">                <span class="attr">"timestamp"</span>: <span class="number">1689303210</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="attr">"timestamp"</span>: <span class="number">1689303210</span>, </span><br><span class="line">    <span class="attr">"version"</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="设备主动获取影子内容"><a href="#设备主动获取影子内容" class="headerlink" title="设备主动获取影子内容"></a>设备主动获取影子内容</h4><p>若应用程序发送指令时，设备离线。设备再次上线后，将主动获取设备影子内容。</p><center><img src="/static/blogImg/device-get.jpg" alt="控制模型"></center><ol><li>主动发送以下消息到 Topic 中，请求获取设备影子中保存的最新状态。这里设备影子将只返回设备需要更新的期望状态。</li><li>当设备影子收到消息后，发送最新状态到 Topic 。</li><li>设备根据返回的数据决定是否更新设备当前状态，一旦更新设备自身状态，需要进行上报状态至设备影子，（流程参考 3.5.1 设备上报状态）</li><li>设备影子接收上报的最新状态后更新 JSON 文档，并返回设备更新结果。</li></ol><h4 id="设备主动删除影子属性"><a href="#设备主动删除影子属性" class="headerlink" title="设备主动删除影子属性"></a>设备主动删除影子属性</h4><p>设备或应用需要删除影子则需要发送请求至设备影子，例如在重置设备时。</p><ol><li>设备发送删除命令到 Topic，将需要删除的属性值设置为 null 。</li><li>设备影子接收到命令后，更新影子 JSON 文件，然后会返回结果给设备</li></ol><h4 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h4><blockquote><p>以下客户端指的是 SDK 或设备</p></blockquote><p>设备影子服务支持在每个更新消息中进行版本控制。这意味着，每次更新影子时，JSON 文档的版本将会增加。这可以确保两件事情：</p><ul><li>如果客户端尝试使用旧版本号覆盖影子，则会更新失败。需要先重新获取影子信息，然后才能更新数据。</li><li>如果消息的版本比客户端存储的版本低，客户端则可决定不对该消息执行操作。<br>客户端可以在影子文档中不包含版本以绕过版本匹配。</li></ul><p>为了减少因版本冲突更新失败的问题，在版本校验失败时进一步校验属性的更新时间戳，如果时间戳符合更新条件（即时间戳大于修改该属性<br>时间戳时），则忽略版本冲突问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;设备影子与物模型&quot;&gt;&lt;a href=&quot;#设备影子与物模型&quot; class=&quot;headerlink&quot; title=&quot;设备影子与物模型&quot;&gt;&lt;/a&gt;设备影子与物模型&lt;/h3&gt;&lt;h4 id=&quot;物模型&quot;&gt;&lt;a href=&quot;#物模型&quot; class=&quot;headerlink&quot; title=&quot;物模型&quot;&gt;&lt;/a&gt;物模型&lt;/h4&gt;&lt;p&gt;物模型（Thing Specification Language）是为产品定义的数据模型，用于描述产品的功能。物模型将设备在云端从属性、服务和事件三个维度，分别描述了该实体是什么、能做什么、可以对外提供哪些信息。定义了物模型的这三个维度，即完成了产品功能的定义。&lt;/p&gt;
    
    </summary>
    
      <category term="IoT" scheme="https://jiawea.github.io/categories/IoT/"/>
    
    
      <category term="物模型" scheme="https://jiawea.github.io/tags/%E7%89%A9%E6%A8%A1%E5%9E%8B/"/>
    
      <category term="设备影子" scheme="https://jiawea.github.io/tags/%E8%AE%BE%E5%A4%87%E5%BD%B1%E5%AD%90/"/>
    
  </entry>
  
  <entry>
    <title>物联网体系梳理</title>
    <link href="https://jiawea.github.io/2023/11/25/iot/"/>
    <id>https://jiawea.github.io/2023/11/25/iot/</id>
    <published>2023-11-25T12:27:22.000Z</published>
    <updated>2024-03-09T09:32:01.072Z</updated>
    
    <content type="html"><![CDATA[<h3 id="从数据的角度审视物联网"><a href="#从数据的角度审视物联网" class="headerlink" title="从数据的角度审视物联网"></a>从数据的角度审视物联网</h3><p>物联网系统的价值在于数据的价值，而数据的价值则来源于我们对数据的分析和应用。数据从“生产”到“消费”的过程需要经过一系列处理，如：</p><ol><li>数据源数据采集（设备）</li><li>数据传输（消息队列、负载均衡）</li><li>数据存储（结构化数据、半结构化数据、非结构化数据）</li><li>数据处理（批处理、流处理）</li><li>数据应用（数据可视化、数据挖掘、商业智能、数据预测、控制决策）</li></ol><a id="more"></a><h4 id="数据采集"><a href="#数据采集" class="headerlink" title="数据采集"></a>数据采集</h4><p>数据一般来自于已接入的智能设备、传感器设备等。只要设备在运⾏中，就会持续不断地产⽣设备数据。</p><h4 id="数据传输"><a href="#数据传输" class="headerlink" title="数据传输"></a>数据传输</h4><p>数据传输就是把采集的数据快速地、可靠地上报到云平台。这里的技术难点是实现高并发。通常物联网设备的数量非常大，每时每刻都在不间断地产生数据，所以海量的数据对云平台的性能构成了挑战。<br>高并发的实现，需要借助分布式的架构设计，同时使用负载均衡、消息队列和缓存等相关技术。</p><h4 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h4><h4 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h4><h4 id="数据应用"><a href="#数据应用" class="headerlink" title="数据应用"></a>数据应用</h4><p><strong>TODO…</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;从数据的角度审视物联网&quot;&gt;&lt;a href=&quot;#从数据的角度审视物联网&quot; class=&quot;headerlink&quot; title=&quot;从数据的角度审视物联网&quot;&gt;&lt;/a&gt;从数据的角度审视物联网&lt;/h3&gt;&lt;p&gt;物联网系统的价值在于数据的价值，而数据的价值则来源于我们对数据的分析和应用。数据从“生产”到“消费”的过程需要经过一系列处理，如：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;数据源数据采集（设备）&lt;/li&gt;
&lt;li&gt;数据传输（消息队列、负载均衡）&lt;/li&gt;
&lt;li&gt;数据存储（结构化数据、半结构化数据、非结构化数据）&lt;/li&gt;
&lt;li&gt;数据处理（批处理、流处理）&lt;/li&gt;
&lt;li&gt;数据应用（数据可视化、数据挖掘、商业智能、数据预测、控制决策）&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="IoT" scheme="https://jiawea.github.io/tags/IoT/"/>
    
  </entry>
  
  <entry>
    <title>influxdb小试牛刀</title>
    <link href="https://jiawea.github.io/2023/10/09/influxdb/"/>
    <id>https://jiawea.github.io/2023/10/09/influxdb/</id>
    <published>2023-10-09T09:34:30.000Z</published>
    <updated>2024-03-09T09:41:02.551Z</updated>
    
    <content type="html"><![CDATA[<p>1.8 版本不支持副本机制，目前开源的高可用方案 influxdb-proxy 是使用多个一致性 hash 环，并将数据分别写入每个 hash 环中的一个实例（双写）。如果数据写入失败则会写入缓存文件以便后续进行重写。</p><p>2.2 版本及以上（2022年03月发布）默认采用 Flux 语言，并支持副本机制，副本机制为异步复制，所以一定程度上无法保证数据不丢失。</p><a id="more"></a><p>下面操作如果没有权限则需要带上 token，例如<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">influx query --org iot --token 'GPJyXz8xOdSCpDItUfhoq939ZhRLGBRaZdSYocnCvhzGM06-PWISiN2BotpRu8lsQx54Quz3DeVDdjxLD_IeqA==' 'from(bucket: "event_message")</span><br><span class="line">  |&gt; range(start: -3d)</span><br><span class="line">  |&gt; filter(fn: (r) =&gt; r["_measurement"] == "event_message_10")</span><br><span class="line">  |&gt; pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")</span><br><span class="line">  |&gt; drop(columns: ["_start", "_stop"])</span><br><span class="line">  |&gt; group()</span><br><span class="line">  |&gt; limit(n: 1, offset: 0)'</span><br></pre></td></tr></table></figure></p><h3 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h3><ol><li>创建超级管理员用户</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">influx setup --org iot --bucket event_message \</span><br><span class="line">    --username wjaiot --password wja123@iot --force</span><br></pre></td></tr></table></figure><ol start="2"><li>创建 org</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">influx org create --name iot --description "iot组织"</span><br></pre></td></tr></table></figure><ol start="3"><li>API Token</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 查询用户token</span><br><span class="line">docker exec influxdb2 influx auth list \</span><br><span class="line">      --user wjaiot \</span><br><span class="line">      --hide-headers | cut -f 3</span><br><span class="line"></span><br><span class="line"># 创建针对 org 的 API Token，后续通过这个 API Token 操作这个组织的数据库</span><br><span class="line">influx auth create \</span><br><span class="line">  --all-access \</span><br><span class="line">  --host http://localhost:8086 \</span><br><span class="line">  --org &lt;ORG&gt; \</span><br><span class="line">  --token &lt;TOKEN&gt;</span><br><span class="line">  </span><br><span class="line">  influx auth create \</span><br><span class="line">  --all-access \</span><br><span class="line">  --org iot</span><br></pre></td></tr></table></figure><h3 id="bucket"><a href="#bucket" class="headerlink" title="bucket"></a>bucket</h3><ol><li>创建</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">influx bucket create --name example-bucket --retention 30d --shard-group-duration 1d \</span><br><span class="line">  --description "bucket description"</span><br></pre></td></tr></table></figure><ol start="2"><li>删除</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">influx bucket delete --name example-bucket</span><br><span class="line">influx bucket delete --id 06c86c40a9f36000</span><br></pre></td></tr></table></figure><ol start="3"><li>更新</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">influx bucket update --id 06c86c40a9f36000 --name new-bucket-name \</span><br><span class="line">   --retention 90d --shard-group-duration 1d</span><br></pre></td></tr></table></figure><h3 id="write"><a href="#write" class="headerlink" title="write"></a>write</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">influx write --bucket example-bucket "</span><br><span class="line">m,host=host1 field1=1.2,field2=5i 1640995200000000000</span><br><span class="line">m,host=host2 field1=2.4,field2=3i 1640995200000000000</span><br><span class="line">"</span><br><span class="line"></span><br><span class="line">influx write dryrun --bucket example-bucket "</span><br><span class="line">m,host=host1 field1=1.2,field2=5i 1640995200000000000</span><br><span class="line">m,host=host2 field1=2.4,field2=3i 1640995200000000000</span><br><span class="line">"</span><br></pre></td></tr></table></figure><h3 id="query"><a href="#query" class="headerlink" title="query"></a>query</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">influx query <span class="comment">--org iot --token 'GPJyXz8xOdSCpDItUfhoq939ZhRLGBRaZdSYocnCvhzGM06-PWISiN2BotpRu8lsQx54Quz3DeVDdjxLD_IeqA==' 'from(bucket: "event_message")</span></span><br><span class="line">  |&gt; range(start: -3d)</span><br><span class="line">  |&gt; filter(fn: (r) =&gt; r["_measurement"] == "event_message_10")</span><br><span class="line">  |&gt; pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")</span><br><span class="line">  |&gt; drop(columns: ["_start", "_stop"])</span><br><span class="line">  |&gt; group()</span><br><span class="line">  |&gt; limit(n: 1, offset: 0)'</span><br><span class="line"></span><br><span class="line">influx query 'from(bucket:"example-bucket") |&gt; range(start:-1m)'</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from(bucket: "telegraf/autogen")</span><br><span class="line">  |&gt; range(start: v.timeRangeStart)</span><br><span class="line">  |&gt; filter(fn: (r) =&gt; r._measurement == "Sessions Count")</span><br><span class="line">  |&gt; distinct(column: "value")</span><br><span class="line">  |&gt; map(fn: (r) =&gt; (&#123;new_column: r._value, _value:r._value&#125;))</span><br><span class="line">  |&gt; count()</span><br></pre></td></tr></table></figure><h3 id="副本配置"><a href="#副本配置" class="headerlink" title="副本配置"></a>副本配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建连接</span></span><br><span class="line">influx remote create \</span><br><span class="line">  --name myremote \</span><br><span class="line">  --org-id &lt;OSS org ID&gt; \</span><br><span class="line">  --token &lt;OSS token&gt; \</span><br><span class="line">  --remote-url &lt;remote URL&gt; \</span><br><span class="line">  --remote-api-token &lt;remote token&gt; \</span><br><span class="line">  --remote-org-id &lt;remote ord ID&gt;</span><br><span class="line">  </span><br><span class="line"><span class="meta">#</span><span class="bash"> 数据复制</span></span><br><span class="line">influx replication create \</span><br><span class="line">--name myreplication</span><br><span class="line">--local-bucket example-local-bucket</span><br><span class="line">--remote-bucket example-remote-bucket</span><br><span class="line">--remote-id 0ooxX0xxXo0x</span><br></pre></td></tr></table></figure><h3 id="查看-series"><a href="#查看-series" class="headerlink" title="查看 series"></a>查看 series</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">influxd inspect report-db --db-path '/var/lib/influxdb2/engine/data' --detailed</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://docs.influxdata.com/influxdb/v2.6/install/#" target="_blank" rel="noopener">influxdb</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.8 版本不支持副本机制，目前开源的高可用方案 influxdb-proxy 是使用多个一致性 hash 环，并将数据分别写入每个 hash 环中的一个实例（双写）。如果数据写入失败则会写入缓存文件以便后续进行重写。&lt;/p&gt;
&lt;p&gt;2.2 版本及以上（2022年03月发布）默认采用 Flux 语言，并支持副本机制，副本机制为异步复制，所以一定程度上无法保证数据不丢失。&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://jiawea.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="时序数据库" scheme="https://jiawea.github.io/tags/%E6%97%B6%E5%BA%8F%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>json序列号性能对比</title>
    <link href="https://jiawea.github.io/2022/04/15/go_json_benchmark/"/>
    <id>https://jiawea.github.io/2022/04/15/go_json_benchmark/</id>
    <published>2022-04-15T13:50:40.000Z</published>
    <updated>2024-03-09T07:25:40.843Z</updated>
    
    <content type="html"><![CDATA[<h3 id="json序列号性能对比"><a href="#json序列号性能对比" class="headerlink" title="json序列号性能对比"></a>json序列号性能对比</h3><p>笔者在日常工作中对高并发的要求越来越高，在针对 <code>QPS</code> <strong>50k/s</strong> 的情况下需要对 <code>json</code> 数据进行序列化和反序列化，如果使用官方提供的 <code>encoding/json</code> 包的话性能会低很多。</p><p>下面基于常用的 json 序列化/反序列化进行性能对比：</p><a id="more"></a><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//easyjson:json</span></span><br><span class="line"><span class="keyword">type</span> DeviceReportData <span class="keyword">struct</span> &#123;</span><br><span class="line">    EventTime  <span class="keyword">string</span>      <span class="string">`json:"event_time"`</span></span><br><span class="line">    AlarmEvent *AlarmEvent <span class="string">`json:"alarm_event"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//easyjson:json</span></span><br><span class="line"><span class="keyword">type</span> AlarmEvent <span class="keyword">struct</span> &#123;</span><br><span class="line">    EventEnd   <span class="keyword">string</span> <span class="string">`json:"event_end"`</span></span><br><span class="line">    EventID    <span class="keyword">string</span> <span class="string">`json:"event_id"`</span></span><br><span class="line">    EventStart <span class="keyword">string</span> <span class="string">`json:"event_start"`</span></span><br><span class="line">    EventType  <span class="keyword">int32</span>  <span class="string">`json:"event_type"`</span></span><br><span class="line">    Image      <span class="keyword">string</span> <span class="string">`json:"image"`</span></span><br><span class="line">    Url        <span class="keyword">string</span> <span class="string">`json:"url"`</span></span><br><span class="line">    ReportType <span class="keyword">int32</span>  <span class="string">`json:"report_type"`</span></span><br><span class="line">    VideoEnd   <span class="keyword">string</span> <span class="string">`json:"video_end"`</span></span><br><span class="line">    VideoStart <span class="keyword">string</span> <span class="string">`json:"video_start"`</span></span><br><span class="line">    Channel    *<span class="keyword">int32</span> <span class="string">`json:"channel"`</span> <span class="comment">// 通道号</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Buf = []<span class="keyword">byte</span>(<span class="string">`&#123;"event_time":"1705976940","alarm_event":&#123;"event_end":"1705976940","event_id":"1705976940","event_start":"1705976940","event_type":10,"image":"http://baidu.com","url":"http://baidu.com","report_type":2,"video_end":"1705976940","video_start":"1705976940","channel":null&#125;&#125;`</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> MapData = <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">    <span class="string">"event_time"</span>: <span class="string">"1705976940"</span>,</span><br><span class="line">    <span class="string">"alarm_event"</span>: <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">       <span class="string">"event_end"</span>:   <span class="string">"1705976940"</span>,</span><br><span class="line">       <span class="string">"event_id"</span>:    <span class="string">"1705976940"</span>,</span><br><span class="line">       <span class="string">"event_start"</span>: <span class="string">"1705976940"</span>,</span><br><span class="line">       <span class="string">"event_type"</span>:  <span class="number">10</span>,</span><br><span class="line">       <span class="string">"image"</span>:       <span class="string">"http://baidu.com"</span>,</span><br><span class="line">       <span class="string">"url"</span>:         <span class="string">"http://baidu.com"</span>,</span><br><span class="line">       <span class="string">"report_type"</span>: <span class="number">2</span>,</span><br><span class="line">       <span class="string">"video_end"</span>:   <span class="string">"1705976940"</span>,</span><br><span class="line">       <span class="string">"video_start"</span>: <span class="string">"1705976940"</span>,</span><br><span class="line">       <span class="string">"channel"</span>:     <span class="literal">nil</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"encoding/json"</span></span><br><span class="line">    <span class="string">"testing"</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"example/json/model"</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"github.com/bytedance/sonic"</span></span><br><span class="line">    jsoniter <span class="string">"github.com/json-iterator/go"</span></span><br><span class="line">    <span class="string">"github.com/mailru/easyjson"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkMarshal</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">    data := model.DeviceReportData&#123;</span><br><span class="line">       EventTime: <span class="string">"1705976940"</span>,</span><br><span class="line">       AlarmEvent: &amp;model.AlarmEvent&#123;</span><br><span class="line">          EventEnd:   <span class="string">"1705976940"</span>,</span><br><span class="line">          EventID:    <span class="string">"1705976940"</span>,</span><br><span class="line">          EventStart: <span class="string">"1705976940"</span>,</span><br><span class="line">          EventType:  <span class="number">10</span>,</span><br><span class="line">          Image:      <span class="string">"http://test.com/cloud_ts%2F7_3301000000189651%2F1702396800_1702449469_1702449473.ts?sign=test.testn9IXLLrB%26q-sigtest.test3Dhost%26q-url-param-list%3D%26q-signature%3D22e454990aa2e1bc9903c1cde0d0952fd56"</span>,</span><br><span class="line">          Url:        <span class="string">"http://test.com/cloud_ts%2F7_3301000000189651%2F1702396800_1702449469_1702449473.ts?sign=test.testn9IXLLrB%26q-sigtest.test3Dhost%26q-url-param-list%3D%26q-signature%3D22e454990aa2e1bc9903c1cde0d0952fd56"</span>,</span><br><span class="line">          ReportType: <span class="number">2</span>,</span><br><span class="line">          VideoEnd:   <span class="string">"1705976940"</span>,</span><br><span class="line">          VideoStart: <span class="string">"1705976940"</span>,</span><br><span class="line">          Channel:    <span class="literal">nil</span>,</span><br><span class="line">       &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">       _, err := json.Marshal(&amp;data)</span><br><span class="line">       <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">          b.Error(err)</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkMarshalSonic</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">    data := model.DeviceReportData&#123;</span><br><span class="line">       EventTime: <span class="string">"1705976940"</span>,</span><br><span class="line">       AlarmEvent: &amp;model.AlarmEvent&#123;</span><br><span class="line">          EventEnd:   <span class="string">"1705976940"</span>,</span><br><span class="line">          EventID:    <span class="string">"1705976940"</span>,</span><br><span class="line">          EventStart: <span class="string">"1705976940"</span>,</span><br><span class="line">          EventType:  <span class="number">10</span>,</span><br><span class="line">          Image:      <span class="string">"http://test.com/cloud_ts%2F7_3301000000189651%2F1702396800_1702449469_1702449473.ts?sign=test.testn9IXLLrB%26q-sigtest.test3Dhost%26q-url-param-list%3D%26q-signature%3D22e454990aa2e1bc9903c1cde0d0952fd56"</span>,</span><br><span class="line">          Url:        <span class="string">"http://test.com/cloud_ts%2F7_3301000000189651%2F1702396800_1702449469_1702449473.ts?sign=test.testn9IXLLrB%26q-sigtest.test3Dhost%26q-url-param-list%3D%26q-signature%3D22e454990aa2e1bc9903c1cde0d0952fd56"</span>,</span><br><span class="line">          ReportType: <span class="number">2</span>,</span><br><span class="line">          VideoEnd:   <span class="string">"1705976940"</span>,</span><br><span class="line">          VideoStart: <span class="string">"1705976940"</span>,</span><br><span class="line">          Channel:    <span class="literal">nil</span>,</span><br><span class="line">       &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">       _, err := sonic.Marshal(&amp;data)</span><br><span class="line">       <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">          b.Error(err)</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkMarshalEasyJson</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">    data := model.DeviceReportData&#123;</span><br><span class="line">       EventTime: <span class="string">"1705976940"</span>,</span><br><span class="line">       AlarmEvent: &amp;model.AlarmEvent&#123;</span><br><span class="line">          EventEnd:   <span class="string">"1705976940"</span>,</span><br><span class="line">          EventID:    <span class="string">"1705976940"</span>,</span><br><span class="line">          EventStart: <span class="string">"1705976940"</span>,</span><br><span class="line">          EventType:  <span class="number">10</span>,</span><br><span class="line">          Image:      <span class="string">"http://test.com/cloud_ts%2F7_3301000000189651%2F1702396800_1702449469_1702449473.ts?sign=test.testn9IXLLrB%26q-sigtest.test3Dhost%26q-url-param-list%3D%26q-signature%3D22e454990aa2e1bc9903c1cde0d0952fd56"</span>,</span><br><span class="line">          Url:        <span class="string">"http://test.com/cloud_ts%2F7_3301000000189651%2F1702396800_1702449469_1702449473.ts?sign=test.testn9IXLLrB%26q-sigtest.test3Dhost%26q-url-param-list%3D%26q-signature%3D22e454990aa2e1bc9903c1cde0d0952fd56"</span>,</span><br><span class="line">          ReportType: <span class="number">2</span>,</span><br><span class="line">          VideoEnd:   <span class="string">"1705976940"</span>,</span><br><span class="line">          VideoStart: <span class="string">"1705976940"</span>,</span><br><span class="line">          Channel:    <span class="literal">nil</span>,</span><br><span class="line">       &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">       _, err := easyjson.Marshal(&amp;data)</span><br><span class="line">       <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">          b.Error(err)</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkMarshalIterJson</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">    data := model.DeviceReportData&#123;</span><br><span class="line">       EventTime: <span class="string">"1705976940"</span>,</span><br><span class="line">       AlarmEvent: &amp;model.AlarmEvent&#123;</span><br><span class="line">          EventEnd:   <span class="string">"1705976940"</span>,</span><br><span class="line">          EventID:    <span class="string">"1705976940"</span>,</span><br><span class="line">          EventStart: <span class="string">"1705976940"</span>,</span><br><span class="line">          EventType:  <span class="number">10</span>,</span><br><span class="line">          Image:      <span class="string">"http://test.com/cloud_ts%2F7_3301000000189651%2F1702396800_1702449469_1702449473.ts?sign=test.testn9IXLLrB%26q-sigtest.test3Dhost%26q-url-param-list%3D%26q-signature%3D22e454990aa2e1bc9903c1cde0d0952fd56"</span>,</span><br><span class="line">          Url:        <span class="string">"http://test.com/cloud_ts%2F7_3301000000189651%2F1702396800_1702449469_1702449473.ts?sign=test.testn9IXLLrB%26q-sigtest.test3Dhost%26q-url-param-list%3D%26q-signature%3D22e454990aa2e1bc9903c1cde0d0952fd56"</span>,</span><br><span class="line">          ReportType: <span class="number">2</span>,</span><br><span class="line">          VideoEnd:   <span class="string">"1705976940"</span>,</span><br><span class="line">          VideoStart: <span class="string">"1705976940"</span>,</span><br><span class="line">          Channel:    <span class="literal">nil</span>,</span><br><span class="line">       &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">       _, err := jsoniter.Marshal(&amp;data)</span><br><span class="line">       <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">          b.Error(err)</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkUnmarshal</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">       <span class="keyword">var</span> data model.DeviceReportData</span><br><span class="line">       err := json.Unmarshal(model.Buf, &amp;data)</span><br><span class="line">       <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">          b.Error(err)</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkUnmarshalSonic</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">       <span class="keyword">var</span> data model.DeviceReportData</span><br><span class="line">       err := sonic.Unmarshal(model.Buf, &amp;data)</span><br><span class="line">       <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">          b.Error(err)</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkUnmarshalEasyJson</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">       <span class="keyword">var</span> data model.DeviceReportData</span><br><span class="line">       err := easyjson.Unmarshal(model.Buf, &amp;data)</span><br><span class="line">       <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">          b.Error(err)</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkUnmarshalIterJson</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">       <span class="keyword">var</span> data model.DeviceReportData</span><br><span class="line">       err := jsoniter.Unmarshal(model.Buf, &amp;data)</span><br><span class="line">       <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">          b.Error(err)</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkMarshalMap</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">       _, err := json.Marshal(model.MapData)</span><br><span class="line">       <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">          b.Error(err)</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkMarshalMapSonic</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">       _, err := sonic.Marshal(model.MapData)</span><br><span class="line">       <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">          b.Error(err)</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkMarshalMapIterJson</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">       _, err := jsoniter.Marshal(model.MapData)</span><br><span class="line">       <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">          b.Error(err)</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkUnmarshalMap</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">       data := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">       err := json.Unmarshal(model.Buf, &amp;data)</span><br><span class="line">       <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">          b.Error(err)</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkUnmarshalMapSonic</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">       data := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">       err := sonic.Unmarshal(model.Buf, &amp;data)</span><br><span class="line">       <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">          b.Error(err)</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkUnmarshalMapIterJson</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">       data := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">       err := jsoniter.Unmarshal(model.Buf, &amp;data)</span><br><span class="line">       <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">          b.Error(err)</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><ol><li>结构体</li></ol><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">go</span> test -benchmem -run=^$ -count=<span class="number">3</span>  -bench <span class="string">"^BenchmarkMarshal.*$"</span></span><br><span class="line">goos: windows</span><br><span class="line">goarch: amd64</span><br><span class="line">pkg: example/json</span><br><span class="line">cpu: Intel(R) Core(TM) i5<span class="number">-9400</span> CPU @ <span class="number">2.90</span>GHz</span><br><span class="line">BenchmarkMarshal<span class="number">-6</span>                <span class="number">207584</span>              <span class="number">5704</span> ns/op            <span class="number">2675</span> B/op          <span class="number">7</span> allocs/op</span><br><span class="line">BenchmarkMarshal<span class="number">-6</span>                <span class="number">210411</span>              <span class="number">5742</span> ns/op            <span class="number">2675</span> B/op          <span class="number">7</span> allocs/op</span><br><span class="line">BenchmarkMarshal<span class="number">-6</span>                <span class="number">210532</span>              <span class="number">5728</span> ns/op            <span class="number">2675</span> B/op          <span class="number">7</span> allocs/op</span><br><span class="line">BenchmarkMarshalSonic<span class="number">-6</span>           <span class="number">480007</span>              <span class="number">2550</span> ns/op            <span class="number">2825</span> B/op         <span class="number">10</span> allocs/op</span><br><span class="line">BenchmarkMarshalSonic<span class="number">-6</span>           <span class="number">460984</span>              <span class="number">2533</span> ns/op            <span class="number">2824</span> B/op         <span class="number">10</span> allocs/op</span><br><span class="line">BenchmarkMarshalSonic<span class="number">-6</span>           <span class="number">486177</span>              <span class="number">2536</span> ns/op            <span class="number">2815</span> B/op         <span class="number">10</span> allocs/op</span><br><span class="line">BenchmarkMarshalEasyJson<span class="number">-6</span>        <span class="number">750121</span>              <span class="number">1613</span> ns/op            <span class="number">1761</span> B/op          <span class="number">7</span> allocs/op</span><br><span class="line">BenchmarkMarshalEasyJson<span class="number">-6</span>        <span class="number">750069</span>              <span class="number">1599</span> ns/op            <span class="number">1761</span> B/op          <span class="number">7</span> allocs/op</span><br><span class="line">BenchmarkMarshalEasyJson<span class="number">-6</span>        <span class="number">717540</span>              <span class="number">1615</span> ns/op            <span class="number">1761</span> B/op          <span class="number">7</span> allocs/op</span><br><span class="line">BenchmarkMarshalIterJson<span class="number">-6</span>        <span class="number">599994</span>              <span class="number">1955</span> ns/op            <span class="number">2682</span> B/op          <span class="number">8</span> allocs/op</span><br><span class="line">BenchmarkMarshalIterJson<span class="number">-6</span>        <span class="number">609241</span>              <span class="number">1946</span> ns/op            <span class="number">2682</span> B/op          <span class="number">8</span> allocs/op</span><br><span class="line">BenchmarkMarshalIterJson<span class="number">-6</span>        <span class="number">607142</span>              <span class="number">1949</span> ns/op            <span class="number">2682</span> B/op          <span class="number">8</span> allocs/op</span><br><span class="line">PASS</span><br><span class="line">ok      example/json    <span class="number">14.752</span>s</span><br></pre></td></tr></table></figure><ol start="2"><li>Map</li></ol><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">go</span> test -benchmem -run=^$ -count=<span class="number">3</span>  -bench <span class="string">"^BenchmarkMarshalMap.*$"</span></span><br><span class="line">goos: windows</span><br><span class="line">goarch: amd64</span><br><span class="line">pkg: example/json</span><br><span class="line">cpu: Intel(R) Core(TM) i5<span class="number">-9400</span> CPU @ <span class="number">2.90</span>GHz</span><br><span class="line">BenchmarkMarshalMap<span class="number">-6</span>                     <span class="number">304677</span>              <span class="number">4085</span> ns/op            <span class="number">1712</span> B/op         <span class="number">33</span> allocs/op</span><br><span class="line">BenchmarkMarshalMap<span class="number">-6</span>                     <span class="number">305149</span>              <span class="number">4063</span> ns/op            <span class="number">1712</span> B/op         <span class="number">33</span> allocs/op</span><br><span class="line">BenchmarkMarshalMap<span class="number">-6</span>                     <span class="number">300013</span>              <span class="number">4073</span> ns/op            <span class="number">1712</span> B/op         <span class="number">33</span> allocs/op</span><br><span class="line">BenchmarkMarshalMapSonic<span class="number">-6</span>               <span class="number">1000000</span>              <span class="number">1022</span> ns/op             <span class="number">360</span> B/op          <span class="number">4</span> allocs/op</span><br><span class="line">BenchmarkMarshalMapSonic<span class="number">-6</span>               <span class="number">1000000</span>              <span class="number">1073</span> ns/op             <span class="number">362</span> B/op          <span class="number">4</span> allocs/op</span><br><span class="line">BenchmarkMarshalMapSonic<span class="number">-6</span>               <span class="number">1000000</span>              <span class="number">1021</span> ns/op             <span class="number">359</span> B/op          <span class="number">4</span> allocs/op</span><br><span class="line">BenchmarkMarshalMapIterJson<span class="number">-6</span>             <span class="number">750084</span>              <span class="number">1543</span> ns/op             <span class="number">544</span> B/op          <span class="number">7</span> allocs/op</span><br><span class="line">BenchmarkMarshalMapIterJson<span class="number">-6</span>             <span class="number">750069</span>              <span class="number">1542</span> ns/op             <span class="number">544</span> B/op          <span class="number">7</span> allocs/op</span><br><span class="line">BenchmarkMarshalMapIterJson<span class="number">-6</span>             <span class="number">798530</span>              <span class="number">1535</span> ns/op             <span class="number">544</span> B/op          <span class="number">7</span> allocs/op</span><br><span class="line">PASS</span><br><span class="line">ok      example/json    <span class="number">10.621</span>s</span><br></pre></td></tr></table></figure><h3 id="反序列号"><a href="#反序列号" class="headerlink" title="反序列号"></a>反序列号</h3><ol><li>结构体</li></ol><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">go</span> test -benchmem -run=^$ -count=<span class="number">3</span>  -bench <span class="string">"^BenchmarkUnmarshal.*$"</span></span><br><span class="line">goos: windows</span><br><span class="line">goarch: amd64</span><br><span class="line">pkg: example/json</span><br><span class="line">cpu: Intel(R) Core(TM) i5<span class="number">-9400</span> CPU @ <span class="number">2.90</span>GHz</span><br><span class="line">BenchmarkUnmarshal<span class="number">-6</span>              <span class="number">390900</span>              <span class="number">3004</span> ns/op             <span class="number">464</span> B/op         <span class="number">13</span> allocs/op</span><br><span class="line">BenchmarkUnmarshal<span class="number">-6</span>              <span class="number">374978</span>              <span class="number">3004</span> ns/op             <span class="number">464</span> B/op         <span class="number">13</span> allocs/op</span><br><span class="line">BenchmarkUnmarshal<span class="number">-6</span>              <span class="number">390684</span>              <span class="number">3009</span> ns/op             <span class="number">464</span> B/op         <span class="number">13</span> allocs/op</span><br><span class="line">BenchmarkUnmarshalSonic<span class="number">-6</span>         <span class="number">798418</span>              <span class="number">1544</span> ns/op             <span class="number">620</span> B/op         <span class="number">12</span> allocs/op</span><br><span class="line">BenchmarkUnmarshalSonic<span class="number">-6</span>         <span class="number">800923</span>              <span class="number">1551</span> ns/op             <span class="number">619</span> B/op         <span class="number">12</span> allocs/op</span><br><span class="line">BenchmarkUnmarshalSonic<span class="number">-6</span>         <span class="number">749980</span>              <span class="number">1538</span> ns/op             <span class="number">621</span> B/op         <span class="number">12</span> allocs/op</span><br><span class="line">BenchmarkUnmarshalEasyJson<span class="number">-6</span>     <span class="number">1300837</span>               <span class="number">904.9</span> ns/op           <span class="number">272</span> B/op          <span class="number">9</span> allocs/op</span><br><span class="line">BenchmarkUnmarshalEasyJson<span class="number">-6</span>     <span class="number">1313162</span>               <span class="number">914.9</span> ns/op           <span class="number">272</span> B/op          <span class="number">9</span> allocs/op</span><br><span class="line">BenchmarkUnmarshalEasyJson<span class="number">-6</span>     <span class="number">1316696</span>               <span class="number">913.5</span> ns/op           <span class="number">272</span> B/op          <span class="number">9</span> allocs/op</span><br><span class="line">BenchmarkUnmarshalIterJson<span class="number">-6</span>      <span class="number">600024</span>              <span class="number">1969</span> ns/op             <span class="number">768</span> B/op         <span class="number">25</span> allocs/op</span><br><span class="line">BenchmarkUnmarshalIterJson<span class="number">-6</span>      <span class="number">599996</span>              <span class="number">1958</span> ns/op             <span class="number">768</span> B/op         <span class="number">25</span> allocs/op</span><br><span class="line">BenchmarkUnmarshalIterJson<span class="number">-6</span>      <span class="number">610034</span>              <span class="number">1957</span> ns/op             <span class="number">768</span> B/op         <span class="number">25</span> allocs/op</span><br><span class="line">PASS</span><br><span class="line">ok      example/json    <span class="number">17.280</span>s</span><br></pre></td></tr></table></figure><ol start="2"><li>Map</li></ol><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">go</span> test -benchmem -run=^$ -count=<span class="number">3</span>  -bench <span class="string">"^BenchmarkUnmarshalMap.*$"</span></span><br><span class="line">goos: windows</span><br><span class="line">goarch: amd64</span><br><span class="line">pkg: example/json</span><br><span class="line">cpu: Intel(R) Core(TM) i5<span class="number">-9400</span> CPU @ <span class="number">2.90</span>GHz</span><br><span class="line">BenchmarkUnmarshalMap<span class="number">-6</span>                   <span class="number">270529</span>              <span class="number">4412</span> ns/op            <span class="number">1950</span> B/op         <span class="number">45</span> allocs/op</span><br><span class="line">BenchmarkUnmarshalMap<span class="number">-6</span>                   <span class="number">268683</span>              <span class="number">4356</span> ns/op            <span class="number">1950</span> B/op         <span class="number">45</span> allocs/op</span><br><span class="line">BenchmarkUnmarshalMap<span class="number">-6</span>                   <span class="number">279075</span>              <span class="number">4344</span> ns/op            <span class="number">1950</span> B/op         <span class="number">45</span> allocs/op</span><br><span class="line">BenchmarkUnmarshalMapSonic<span class="number">-6</span>              <span class="number">600084</span>              <span class="number">1906</span> ns/op            <span class="number">1736</span> B/op         <span class="number">18</span> allocs/op</span><br><span class="line">BenchmarkUnmarshalMapSonic<span class="number">-6</span>              <span class="number">631568</span>              <span class="number">1898</span> ns/op            <span class="number">1737</span> B/op         <span class="number">18</span> allocs/op</span><br><span class="line">BenchmarkUnmarshalMapSonic<span class="number">-6</span>              <span class="number">631564</span>              <span class="number">1903</span> ns/op            <span class="number">1740</span> B/op         <span class="number">18</span> allocs/op</span><br><span class="line">BenchmarkUnmarshalMapIterJson<span class="number">-6</span>           <span class="number">356742</span>              <span class="number">3305</span> ns/op            <span class="number">1902</span> B/op         <span class="number">50</span> allocs/op</span><br><span class="line">BenchmarkUnmarshalMapIterJson<span class="number">-6</span>           <span class="number">345680</span>              <span class="number">3332</span> ns/op            <span class="number">1902</span> B/op         <span class="number">50</span> allocs/op</span><br><span class="line">BenchmarkUnmarshalMapIterJson<span class="number">-6</span>           <span class="number">342613</span>              <span class="number">3313</span> ns/op            <span class="number">1902</span> B/op         <span class="number">50</span> allocs/op</span><br><span class="line">PASS</span><br><span class="line">ok      example/json    <span class="number">10.937</span>s</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li><p>结构体，从测试结果上看 easyjson 性能是最好的，缺点是需要使用工具事先生成结构体的序列化/反序列化接口，如果忘记生成则会有问题。<br>序列化：easyjson &gt; json-iterator &gt; sonic &gt; encoding/json<br>反序列化：easyjson &gt; sonic &gt; json-iterator &gt; encoding/json</p></li><li><p>map<br>sonic &gt; json-iterator &gt; encoding/json</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;json序列号性能对比&quot;&gt;&lt;a href=&quot;#json序列号性能对比&quot; class=&quot;headerlink&quot; title=&quot;json序列号性能对比&quot;&gt;&lt;/a&gt;json序列号性能对比&lt;/h3&gt;&lt;p&gt;笔者在日常工作中对高并发的要求越来越高，在针对 &lt;code&gt;QPS&lt;/code&gt; &lt;strong&gt;50k/s&lt;/strong&gt; 的情况下需要对 &lt;code&gt;json&lt;/code&gt; 数据进行序列化和反序列化，如果使用官方提供的 &lt;code&gt;encoding/json&lt;/code&gt; 包的话性能会低很多。&lt;/p&gt;
&lt;p&gt;下面基于常用的 json 序列化/反序列化进行性能对比：&lt;/p&gt;
    
    </summary>
    
      <category term="后端" scheme="https://jiawea.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Golang" scheme="https://jiawea.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>字符串拼接性能对比</title>
    <link href="https://jiawea.github.io/2022/03/09/go_string_benchmark/"/>
    <id>https://jiawea.github.io/2022/03/09/go_string_benchmark/</id>
    <published>2022-03-09T06:41:40.000Z</published>
    <updated>2024-03-09T07:27:11.792Z</updated>
    
    <content type="html"><![CDATA[<h3 id="字符串拼接性能对比"><a href="#字符串拼接性能对比" class="headerlink" title="字符串拼接性能对比"></a>字符串拼接性能对比</h3><p>笔者在日常工作中经常会遇到将数据进行批处理，即接收多个数据源发送的数据后合并批量操作。在一次针对字符串拼接时出现处理耗时达到 <strong>1s</strong>（偶发情况），在排查问题时发现在高并发的情况下由于使用了 <code>+</code> 直接对字符串进行拼接导致系统处理时间很慢，因此进行优化。</p><p>下面基于常用的字符串拼接进行性能对比：</p><a id="more"></a><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkSprintf</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">       <span class="keyword">var</span> values <span class="keyword">string</span></span><br><span class="line">       <span class="keyword">for</span> _, s := <span class="keyword">range</span> bufData &#123;</span><br><span class="line">          <span class="keyword">if</span> s != <span class="string">""</span> &#123;</span><br><span class="line">             values += fmt.Sprintf(<span class="string">"(%s),"</span>, s)</span><br><span class="line">          &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       _ = strings.TrimRight(values, <span class="string">","</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkBuilder</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">       <span class="keyword">var</span> buf strings.Builder</span><br><span class="line">       <span class="keyword">for</span> _, s := <span class="keyword">range</span> bufData &#123;</span><br><span class="line">          <span class="keyword">if</span> s != <span class="string">""</span> &#123;</span><br><span class="line">             buf.WriteString(<span class="string">"("</span>)</span><br><span class="line">             buf.WriteString(s)</span><br><span class="line">             buf.WriteString(<span class="string">")"</span>)</span><br><span class="line">             buf.WriteString(<span class="string">","</span>)</span><br><span class="line">          &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       _ = strings.TrimRight(buf.String(), <span class="string">","</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkBufferWriteString</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">       <span class="keyword">var</span> buf bytes.Buffer</span><br><span class="line">       <span class="keyword">for</span> _, s := <span class="keyword">range</span> bufData &#123;</span><br><span class="line">          <span class="keyword">if</span> s != <span class="string">""</span> &#123;</span><br><span class="line">             buf.WriteString(<span class="string">"("</span>)</span><br><span class="line">             buf.WriteString(s)</span><br><span class="line">             buf.WriteString(<span class="string">"),"</span>)</span><br><span class="line">          &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       _ = strings.TrimRight(buf.String(), <span class="string">","</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkBufferWriteByte</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">       <span class="keyword">var</span> buf bytes.Buffer</span><br><span class="line">       <span class="keyword">for</span> _, s := <span class="keyword">range</span> bufData &#123;</span><br><span class="line">          <span class="keyword">if</span> s != <span class="string">""</span> &#123;</span><br><span class="line">             buf.Write([]<span class="keyword">byte</span>(<span class="string">"("</span>))</span><br><span class="line">             buf.Write([]<span class="keyword">byte</span>(s))</span><br><span class="line">             buf.Write([]<span class="keyword">byte</span>(<span class="string">"),"</span>))</span><br><span class="line">          &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       _ = strings.TrimRight(buf.String(), <span class="string">","</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在高并发情况下，使用 <code>bytes.Buffer</code> 进行字符串拼接的效率要比使用 <code>+</code> 或者 <code>Sprintf</code> 的效率高出好几倍。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ go test -benchmem -run=^$ -count=3  -bench &quot;^Benchmar.*$&quot;</span><br><span class="line">goos: windows</span><br><span class="line">goarch: amd64</span><br><span class="line">pkg: example/str</span><br><span class="line">cpu: Intel(R) Core(TM) i5-9400 CPU @ 2.90GHz</span><br><span class="line">BenchmarkSprintf-6                  7252            156178 ns/op         1243382 B/op        105 allocs/op</span><br><span class="line">BenchmarkSprintf-6                  8191            160537 ns/op         1243474 B/op        105 allocs/op</span><br><span class="line">BenchmarkSprintf-6                  8370            151687 ns/op         1243526 B/op        105 allocs/op</span><br><span class="line">BenchmarkBuilder-6                 35635             33629 ns/op          273802 B/op         12 allocs/op</span><br><span class="line">BenchmarkBuilder-6                 33496             35294 ns/op          273802 B/op         12 allocs/op</span><br><span class="line">BenchmarkBuilder-6                 35260             35085 ns/op          273801 B/op         12 allocs/op</span><br><span class="line">BenchmarkBufferWriteString-6       47410             26383 ns/op          194368 B/op          8 allocs/op</span><br><span class="line">BenchmarkBufferWriteString-6       46074             26450 ns/op          194368 B/op          8 allocs/op</span><br><span class="line">BenchmarkBufferWriteString-6       44607             25640 ns/op          194368 B/op          8 allocs/op</span><br><span class="line">BenchmarkBufferWriteByte-6         35469             34121 ns/op          257089 B/op         43 allocs/op</span><br><span class="line">BenchmarkBufferWriteByte-6         37026             36862 ns/op          257089 B/op         43 allocs/op</span><br><span class="line">BenchmarkBufferWriteByte-6         34782             35819 ns/op          257089 B/op         43 allocs/op</span><br><span class="line">PASS</span><br><span class="line">ok      example/str     18.770s</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;字符串拼接性能对比&quot;&gt;&lt;a href=&quot;#字符串拼接性能对比&quot; class=&quot;headerlink&quot; title=&quot;字符串拼接性能对比&quot;&gt;&lt;/a&gt;字符串拼接性能对比&lt;/h3&gt;&lt;p&gt;笔者在日常工作中经常会遇到将数据进行批处理，即接收多个数据源发送的数据后合并批量操作。在一次针对字符串拼接时出现处理耗时达到 &lt;strong&gt;1s&lt;/strong&gt;（偶发情况），在排查问题时发现在高并发的情况下由于使用了 &lt;code&gt;+&lt;/code&gt; 直接对字符串进行拼接导致系统处理时间很慢，因此进行优化。&lt;/p&gt;
&lt;p&gt;下面基于常用的字符串拼接进行性能对比：&lt;/p&gt;
    
    </summary>
    
      <category term="后端" scheme="https://jiawea.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Golang" scheme="https://jiawea.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Kafka如何做到高并发读写</title>
    <link href="https://jiawea.github.io/2021/12/10/kafka/"/>
    <id>https://jiawea.github.io/2021/12/10/kafka/</id>
    <published>2021-12-10T14:01:36.000Z</published>
    <updated>2022-04-10T16:55:24.451Z</updated>
    
    <content type="html"><![CDATA[<p><code>Kafka</code>是一个分布式流处理平台<code>a distributed streaming platform</code>。以发布订阅的模式来记录流数据，类似于消息队列或企业级消息系统。下面引用官方文档的描述：</p><p><strong>A streaming platform has three key capabilities:</strong></p><ol><li>Publish and subscribe to streams of records, similar to a message queue or enterprise messaging system. </li><li>Store streams of records in a fault-tolerant durable way. </li><li>Process streams of records as they occur.</li></ol><h2 id="如何实现快速读写"><a href="#如何实现快速读写" class="headerlink" title="如何实现快速读写"></a>如何实现快速读写</h2><ol><li>顺序写（page cache）</li><li>零拷贝</li></ol><center><img src="/static/kafka/main.png" alt="kafka"></center><a id="more"></a><h3 id="写入数据"><a href="#写入数据" class="headerlink" title="写入数据"></a>写入数据</h3><p><code>Kafka</code>在对磁盘写数据时采用了顺序写，每个<code>Partition</code>（分区）其实就是一个<code>log</code>文件。<code>Producer</code> 向对应的分区以追加写的方式写入文件末尾。这种方式相比随机写入要快很多。</p><center><img src="/static/kafka/log_anatomy.png" alt="写入数据"></center><p>实际上<code>Kafka</code>的数据并不是直接写到磁盘的，操作系统本身有一层缓存 <code>page cache</code>，当程序往文件中写数据时，会先写到<code>ByteBuffer</code>中，然后再提交到<code>page cache</code>中，此时程序由内核态返回至用户态告知写入成功，后续由操作系统自己把<code>page cache</code>里的数据刷入磁盘中。</p><p>通过这种相当于写入内存的方式提高了I/O效率。</p><center><img src="/static/kafka/page_cache.png" alt="pageCache"></center><h3 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h3><p>现代<code>unix</code>操作系统提供了一种优化方式，可以将<code>page cache</code>中的数据直接传输到<code>socket</code>中，在Linux中可以通过调用系统提供的<code>sendfile</code>来实现。如果使用传统的往磁盘读数据的方式，会经过这几步：</p><ol><li>调用<code>read()</code>，操作系统从磁盘读取数据并写入内核态中的<code>pagecache</code>。</li><li><code>read()</code>返回，应用程序将数据从内核态缓冲区拷贝至用户态缓冲区中。</li><li>调用<code>write()</code>，应用程序将数据从用户态缓冲区拷贝至内核态的套接字缓冲区中。</li><li>操作系统将数据从套接字缓冲区拷贝到<code>NIC</code>缓冲区（网卡），然后通过网络发送。</li></ol><p>以上传统读取数据的步骤，需要进过<strong>4次</strong>拷贝操作，很显然会影响读取的速度。<code>Kafka</code>通过使用<code>sendfile</code>，操作系统可以将<code>page cache</code>中的数据直接拷贝到网卡中，从而避免了重复拷贝。提高了读取性能。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sendfile(socket, file, len);</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>Kafka</code>之所以能够提供高并发的读取，主要是利用了磁盘的顺序写，并利用操作系统的<code>page cache</code>提高了磁盘I/O的效率；并运用了<code>zore-copy</code>技术，提升了整个系统的速度。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://kafka.apache.org/23/documentation.html" target="_blank" rel="noopener">Kafka</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Kafka&lt;/code&gt;是一个分布式流处理平台&lt;code&gt;a distributed streaming platform&lt;/code&gt;。以发布订阅的模式来记录流数据，类似于消息队列或企业级消息系统。下面引用官方文档的描述：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A streaming platform has three key capabilities:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Publish and subscribe to streams of records, similar to a message queue or enterprise messaging system. &lt;/li&gt;
&lt;li&gt;Store streams of records in a fault-tolerant durable way. &lt;/li&gt;
&lt;li&gt;Process streams of records as they occur.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;如何实现快速读写&quot;&gt;&lt;a href=&quot;#如何实现快速读写&quot; class=&quot;headerlink&quot; title=&quot;如何实现快速读写&quot;&gt;&lt;/a&gt;如何实现快速读写&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;顺序写（page cache）&lt;/li&gt;
&lt;li&gt;零拷贝&lt;/li&gt;
&lt;/ol&gt;
&lt;center&gt;&lt;img src=&quot;/static/kafka/main.png&quot; alt=&quot;kafka&quot;&gt;&lt;/center&gt;
    
    </summary>
    
      <category term="消息队列" scheme="https://jiawea.github.io/categories/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
    
      <category term="Kafka" scheme="https://jiawea.github.io/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>Python版本管理</title>
    <link href="https://jiawea.github.io/2021/06/06/Py_pyenv/"/>
    <id>https://jiawea.github.io/2021/06/06/Py_pyenv/</id>
    <published>2021-06-06T07:58:52.000Z</published>
    <updated>2021-07-11T07:18:00.642Z</updated>
    
    <content type="html"><![CDATA[<p>笔者在使用 <code>Python</code> 使通常会遇到当前正在使用的版本与想要用的版本不一致，但是又不能改动它，不然原先使用的应用可能就会无缘无故因为版本问题出现一系列的问题。所以这时候就需要用到了版本控制，笔者使用的是 <code>pyenv</code> 来管理不同的版本，<code>virtualenv</code> 来创建不同的虚拟环境。</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="脚本安装"><a href="#脚本安装" class="headerlink" title="脚本安装"></a>脚本安装</h3><p>可能网络问题安装不成功<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash</span></span><br></pre></td></tr></table></figure></p><h3 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/yyuu/pyenv.git ~/.pyenv</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用 bash 命令行则加入到 ~/.bashrc 文件末尾，并执行 </span></span><br><span class="line">export PYENV_ROOT="$HOME/.pyenv"</span><br><span class="line">export PATH="$PYENV_ROOT/bin:$PATH"</span><br><span class="line">eval "$(pyenv init -)"</span><br><span class="line"></span><br><span class="line">source ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装指定版本，使用国内源</span></span><br><span class="line">v=3.7.9;wget https://npm.taobao.org/mirrors/python/$v/Python-$v.tar.xz -P ~/.pyenv/cache/;pyenv install $v</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果缺少依赖</span></span><br><span class="line">sudo apt-get install -y gcc make build-essential libssl-dev zlib1g-dev libbz2-dev \</span><br><span class="line">libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \</span><br><span class="line">xz-utils tk-dev libffi-dev liblzma-dev libldap2-dev libsasl2-dev</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装 virtualenv 插件</span></span><br><span class="line">git clone https://github.com/yyuu/pyenv-virtualenv.git ~/.pyenv/plugins/pyenv-virtualenv</span><br><span class="line"></span><br><span class="line">eval "$(pyenv virtualenv-init -)"</span><br><span class="line"></span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p>常用命令<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看已安装的版本</span></span><br><span class="line">root@ray:~# pyenv versions</span><br><span class="line">* system (set by /root/.pyenv/version)</span><br><span class="line">  3.7.9</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换版本</span></span><br><span class="line">root@ray:~# pyenv global 3.7.9</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建虚拟环境</span></span><br><span class="line">root@ray:~# pyenv virtualenv test</span><br><span class="line">root@ray:~# pyenv activate test</span><br><span class="line">root@ray:~# pyenv deactivate</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;笔者在使用 &lt;code&gt;Python&lt;/code&gt; 使通常会遇到当前正在使用的版本与想要用的版本不一致，但是又不能改动它，不然原先使用的应用可能就会无缘无故因为版本问题出现一系列的问题。所以这时候就需要用到了版本控制，笔者使用的是 &lt;code&gt;pyenv&lt;/code&gt; 来管理不同的版本，&lt;code&gt;virtualenv&lt;/code&gt; 来创建不同的虚拟环境。&lt;/p&gt;
    
    </summary>
    
      <category term="后端" scheme="https://jiawea.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="python" scheme="https://jiawea.github.io/tags/python/"/>
    
      <category term="版本管理" scheme="https://jiawea.github.io/tags/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
    
      <category term="虚拟环境" scheme="https://jiawea.github.io/tags/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
    
  </entry>
  
  <entry>
    <title>使用 etcd 作为服务配置中心</title>
    <link href="https://jiawea.github.io/2020/12/12/Etcd/"/>
    <id>https://jiawea.github.io/2020/12/12/Etcd/</id>
    <published>2020-12-12T01:30:18.000Z</published>
    <updated>2020-12-12T06:26:01.955Z</updated>
    
    <content type="html"><![CDATA[<h3 id="etcd-简单介绍"><a href="#etcd-简单介绍" class="headerlink" title="etcd 简单介绍"></a>etcd 简单介绍</h3><p>etcd 是一个高可用的分布式 key-value 数据存储系统，内部采用 <code>Raft</code> 协议作为一致性算法，基于 Go 语言实现。</p><p>主要特点：</p><ul><li>简单：提供明确的定义、面向用户的 API（gRPC）</li><li>安全：支持 TLS客户端证书认证</li><li>快速：基准测试每秒 10000 写入</li><li>可靠：使用 Raft 算法保证一致性</li></ul><a id="more"></a><h3 id="etcd-应用场景"><a href="#etcd-应用场景" class="headerlink" title="etcd 应用场景"></a>etcd 应用场景</h3><h4 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h4><p>服务发现要解决的也是分布式系统中最常见的问题之一，即在同一个分布式集群中的进程或服务，要如何才能找到对方并建立连接。本质上来说，服务发现就是想要了解集群中是否有进程在监听 <code>udp</code> 或 <code>tcp</code> 端口，并且通过名字就可以查找和连接。</p><center><img src="/static/etcd/01.png" alt="服务发现"></center><h4 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a>配置中心</h4><p>将配置进行集中管理。一般应用在启动时会主动从 etcd 中获取配置信息，同时在节点上注册一个 <code>Watcher</code> 监控，每当配置有更新时，etcd 都会实时通知订阅者，以此获取最新的配置。</p><h4 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h4><p>使用 <code>Raft</code> 算法保持数据的一致性，每当数据储存到集群中的值必然是全局一致的，所以很容易实现分布式锁。所有获取锁的用户最终只有一个可以得到，为此提供了分布式锁原子操作 CAS（CompareAndSwap）的 API。通过设置prevExist值，可以保证在多个节点同时去创建某个目录时，只有一个成功。而创建成功的用户就可以认为是获得了锁。</p><h3 id="Raft-简单介绍"><a href="#Raft-简单介绍" class="headerlink" title="Raft 简单介绍"></a>Raft 简单介绍</h3><p><code>Raft</code> 是一种协议，集群节点可以使用该协议维护一个复制的状态机，状态机与复制的日志保存同步。具体详情可看<a href="https://Raft.github.io/Raft.pdf" target="_blank" rel="noopener">Raft.pdf</a>。<code>Raft</code> 被广泛地使用在许多产品中，其中包括 etcd, Kubernetes, Docker Swarm, Cloud Foundry Diego, CockroachDB, TiDB, Project Calico, Flannel, Hyperledger 等。</p><p>相关特性：</p><ul><li>领导人选举</li><li>日志复制</li><li>日志压缩</li><li>会员变更</li><li>领导转移扩展</li><li>····</li></ul><h3 id="etcd-与其他常见服务发现框架对比"><a href="#etcd-与其他常见服务发现框架对比" class="headerlink" title="etcd 与其他常见服务发现框架对比"></a>etcd 与其他常见服务发现框架对比</h3><table><thead><tr><th style="text-align:center">名称</th><th>优点</th><th>缺点</th><th style="text-align:center">接口</th><th style="text-align:center">一致性算法</th></tr></thead><tbody><tr><td style="text-align:center">zookeeper</td><td>1.功能强大，不仅仅只是服务发现<br>2.提供 watcher 机制能实时获取服务提供者的状态<br>3.dubbo 等框架支持</td><td>1.没有健康检查<br>2.需在服务中集成 sdk，复杂度高<br>3.不支持多数据中心</td><td style="text-align:center">sdk</td><td style="text-align:center">Paxos</td></tr><tr><td style="text-align:center">consul</td><td>1.简单易用，不需要集成 sdk<br>2.自带健康检查<br>3.支持多数据中心<br>4.提供 web 管理界面<br></td><td>不能实时获取服务信息的变化通知</td><td style="text-align:center">http/dns</td><td style="text-align:center">Raft</td></tr><tr><td style="text-align:center">etcd</td><td>1.简单易用，不需要集成 sdk<br>可配置性强<br></td><td>1.没有健康检查<br>2.需配合第三方工具一起完成服务发现<br>3.不支持多数据中心</td><td style="text-align:center">http</td><td style="text-align:center">Raft</td></tr></tbody></table><h3 id="etcd-单机部署"><a href="#etcd-单机部署" class="headerlink" title="etcd 单机部署"></a>etcd 单机部署</h3><p>部署环境：Ubuntu-16.04</p><h4 id="etcd-Server-端"><a href="#etcd-Server-端" class="headerlink" title="etcd Server 端"></a>etcd Server 端</h4><p>下载：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ETCD_VER=v3.4.14</span><br><span class="line"></span><br><span class="line"># choose either URL</span><br><span class="line">GOOGLE_URL=https://storage.googleapis.com/etcd</span><br><span class="line">GITHUB_URL=https://github.com/etcd-io/etcd/releases/download</span><br><span class="line">DOWNLOAD_URL=$&#123;GOOGLE_URL&#125;</span><br><span class="line"></span><br><span class="line">rm -f /tmp/etcd-$&#123;ETCD_VER&#125;-linux-amd64.tar.gz</span><br><span class="line">rm -rf /tmp/etcd-download-test &amp;&amp; mkdir -p /tmp/etcd-download-test</span><br><span class="line"></span><br><span class="line">curl -L $&#123;DOWNLOAD_URL&#125;/$&#123;ETCD_VER&#125;/etcd-$&#123;ETCD_VER&#125;-linux-amd64.tar.gz -o /tmp/etcd-$&#123;ETCD_VER&#125;-linux-amd64.tar.gz</span><br><span class="line">tar xzvf /tmp/etcd-$&#123;ETCD_VER&#125;-linux-amd64.tar.gz -C /tmp/etcd-download-test --strip-components=1</span><br><span class="line">rm -f /tmp/etcd-$&#123;ETCD_VER&#125;-linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">/tmp/etcd-download-test/etcd --version</span><br><span class="line">/tmp/etcd-download-test/etcdctl version</span><br></pre></td></tr></table></figure></p><p>启动：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># start a local etcd server</span><br><span class="line">/tmp/etcd-download-test/etcd</span><br></pre></td></tr></table></figure></p><p>启动信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">[WARNING] Deprecated &apos;--logger=capnslog&apos; flag is set; use &apos;--logger=zap&apos; flag instead</span><br><span class="line">2020-12-10 17:07:49.921382 I | etcdmain: etcd Version: 3.4.14</span><br><span class="line">2020-12-10 17:07:49.924906 I | etcdmain: Git SHA: 8a03d2e96</span><br><span class="line">2020-12-10 17:07:49.925297 I | etcdmain: Go Version: go1.12.17</span><br><span class="line">2020-12-10 17:07:49.927355 I | etcdmain: Go OS/Arch: linux/amd64</span><br><span class="line">2020-12-10 17:07:49.928312 I | etcdmain: setting maximum number of CPUs to 2, total number of available CPUs is 2</span><br><span class="line">2020-12-10 17:07:49.928478 W | etcdmain: no data-dir provided, using default data-dir ./default.etcd</span><br><span class="line">[WARNING] Deprecated &apos;--logger=capnslog&apos; flag is set; use &apos;--logger=zap&apos; flag instead</span><br><span class="line">2020-12-10 17:07:49.930599 I | embed: name = default</span><br><span class="line">2020-12-10 17:07:49.930678 I | embed: data dir = default.etcd</span><br><span class="line">2020-12-10 17:07:49.930739 I | embed: member dir = default.etcd/member</span><br><span class="line">2020-12-10 17:07:49.930810 I | embed: heartbeat = 100ms</span><br><span class="line">2020-12-10 17:07:49.930885 I | embed: election = 1000ms</span><br><span class="line">2020-12-10 17:07:49.930953 I | embed: snapshot count = 100000</span><br><span class="line">2020-12-10 17:07:49.931005 I | embed: advertise client URLs = http://localhost:2379</span><br><span class="line">2020-12-10 17:07:49.974825 I | etcdserver: starting member 8e9e05c52164694d in cluster cdf818194e3a8c32</span><br><span class="line">Raft2020/12/10 17:07:49 INFO: 8e9e05c52164694d switched to configuration voters=()</span><br><span class="line">Raft2020/12/10 17:07:49 INFO: 8e9e05c52164694d became follower at term 0</span><br><span class="line">Raft2020/12/10 17:07:49 INFO: newRaft 8e9e05c52164694d [peers: [], term: 0, commit: 0, applied: 0, lastindex: 0, lastterm: 0]</span><br><span class="line">Raft2020/12/10 17:07:49 INFO: 8e9e05c52164694d became follower at term 1</span><br><span class="line">Raft2020/12/10 17:07:49 INFO: 8e9e05c52164694d switched to configuration voters=(10276657743932975437)</span><br><span class="line">2020-12-10 17:07:49.997394 W | auth: simple token is not cryptographically signed</span><br><span class="line">2020-12-10 17:07:50.011174 I | etcdserver: starting server... [version: 3.4.14, cluster version: to_be_decided]</span><br><span class="line">2020-12-10 17:07:50.014616 I | etcdserver: 8e9e05c52164694d as single-node; fast-forwarding 9 ticks (election ticks 10)</span><br><span class="line">Raft2020/12/10 17:07:50 INFO: 8e9e05c52164694d switched to configuration voters=(10276657743932975437)</span><br><span class="line">2020-12-10 17:07:50.018429 I | etcdserver/membership: added member 8e9e05c52164694d [http://localhost:2380] to cluster cdf818194e3a8c32</span><br><span class="line">2020-12-10 17:07:50.020840 I | embed: listening for peers on 127.0.0.1:2380</span><br><span class="line">Raft2020/12/10 17:07:50 INFO: 8e9e05c52164694d is starting a new election at term 1</span><br><span class="line">Raft2020/12/10 17:07:50 INFO: 8e9e05c52164694d became candidate at term 2</span><br><span class="line">Raft2020/12/10 17:07:50 INFO: 8e9e05c52164694d received MsgVoteResp from 8e9e05c52164694d at term 2</span><br><span class="line">Raft2020/12/10 17:07:50 INFO: 8e9e05c52164694d became leader at term 2</span><br><span class="line">Raft2020/12/10 17:07:50 INFO: Raft.node: 8e9e05c52164694d elected leader 8e9e05c52164694d at term 2</span><br><span class="line">2020-12-10 17:07:50.788838 I | etcdserver: setting up the initial cluster version to 3.4</span><br><span class="line">2020-12-10 17:07:50.794910 N | etcdserver/membership: set the initial cluster version to 3.4</span><br><span class="line">2020-12-10 17:07:50.795922 I | etcdserver/api: enabled capabilities for version 3.4</span><br><span class="line">2020-12-10 17:07:50.796055 I | etcdserver: published &#123;Name:default ClientURLs:[http://localhost:2379]&#125; to cluster cdf818194e3a8c32</span><br><span class="line">2020-12-10 17:07:50.797360 I | embed: ready to serve client requests</span><br><span class="line">2020-12-10 17:07:50.803625 N | embed: serving insecure client requests on 127.0.0.1:2379, this is strongly discouraged!</span><br></pre></td></tr></table></figure></p><p>相关信息：</p><ul><li>name 表示节点名称，默认为 default。</li><li>data-dir 保存日志和快照的目录，默认为当前工作目录default.etcd/目录下。</li><li>在 <a href="http://localhost:2380" target="_blank" rel="noopener">http://localhost:2380</a> 和集群中其他节点通信。</li><li>在 <a href="http://localhost:2379" target="_blank" rel="noopener">http://localhost:2379</a> 提供 HTTP API 服务，供客户端交互。</li><li>heartbeat 为 100ms，该参数的作用是 leader 多久发送一次心跳到</li><li>followers，默认值是100ms。</li><li>election 为 1000ms，该参数的作用是重新投票的超时时间，如果 follow 在该 + 时间间隔没有收到心跳包，会触发重新投票，默认为 1000ms。</li><li>snapshot count 为 10000，该参数的作用是指定有多少事务被提交时，触发 + 截取快照保存到磁盘。</li><li>集群和每个节点都会生成一个 uuid。</li><li>启动的时候会运行 Raft，选举出 leader。</li></ul><h4 id="etcd-Client-端"><a href="#etcd-Client-端" class="headerlink" title="etcd Client 端"></a>etcd Client 端</h4><h5 id="命令行客户端"><a href="#命令行客户端" class="headerlink" title="命令行客户端"></a>命令行客户端</h5><p>etcd 提供一个命令行客户端，这里简单看一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># write,read to etcd</span><br><span class="line">/tmp/etcd-download-test/etcdctl --endpoints=localhost:2379 put foo bar</span><br><span class="line">/tmp/etcd-download-test/etcdctl --endpoints=localhost:2379 get foo</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">ray@ray-virtual-machine:~$ /tmp/etcd-download-test/etcdctl -h</span><br><span class="line">NAME:</span><br><span class="line">        etcdctl - A simple command line client for etcd3.</span><br><span class="line"></span><br><span class="line">USAGE:</span><br><span class="line">        etcdctl [flags]</span><br><span class="line"></span><br><span class="line">VERSION:</span><br><span class="line">        3.4.14</span><br><span class="line"></span><br><span class="line">API VERSION:</span><br><span class="line">        3.4</span><br><span class="line"></span><br><span class="line">COMMANDS:</span><br><span class="line">        alarm disarm            Disarms all alarms</span><br><span class="line">        alarm list              Lists all alarms</span><br><span class="line">        auth disable            Disables authentication</span><br><span class="line">        auth enable             Enables authentication</span><br><span class="line">        check datascale         Check the memory usage of holding data for different workloads on a given server endpoint.</span><br><span class="line">        check perf              Check the performance of the etcd cluster</span><br><span class="line">        compaction              Compacts the event history in etcd</span><br><span class="line">        defrag                  Defragments the storage of the etcd members with given endpoints</span><br><span class="line">        del                     Removes the specified key or range of keys [key, range_end)</span><br><span class="line">        elect                   Observes and participates in leader election</span><br><span class="line">        endpoint hashkv         Prints the KV history hash for each endpoint in --endpoints</span><br><span class="line">        endpoint health         Checks the healthiness of endpoints specified in `--endpoints` flag</span><br><span class="line">        endpoint status         Prints out the status of endpoints specified in `--endpoints` flag</span><br><span class="line">        get                     Gets the key or a range of keys</span><br><span class="line">        help                    Help about any command</span><br><span class="line">        lease grant             Creates leases</span><br><span class="line">        lease keep-alive        Keeps leases alive (renew)</span><br><span class="line">        lease list              List all active leases</span><br><span class="line">        lease revoke            Revokes leases</span><br><span class="line">        lease timetolive        Get lease information</span><br><span class="line">        lock                    Acquires a named lock</span><br><span class="line">        make-mirror             Makes a mirror at the destination etcd cluster</span><br><span class="line">        member add              Adds a member into the cluster</span><br><span class="line">        member list             Lists all members in the cluster</span><br><span class="line">        member promote          Promotes a non-voting member in the cluster</span><br><span class="line">        member remove           Removes a member from the cluster</span><br><span class="line">        member update           Updates a member in the cluster</span><br><span class="line">        migrate                 Migrates keys in a v2 store to a mvcc store</span><br><span class="line">        move-leader             Transfers leadership to another etcd cluster member.</span><br><span class="line">        put                     Puts the given key into the store</span><br><span class="line">        role add                Adds a new role</span><br><span class="line">        role delete             Deletes a role</span><br><span class="line">        role get                Gets detailed information of a role</span><br><span class="line">        role grant-permission   Grants a key to a role</span><br><span class="line">        role list               Lists all roles</span><br><span class="line">        role revoke-permission  Revokes a key from a role</span><br><span class="line">        snapshot restore        Restores an etcd member snapshot to an etcd directory</span><br><span class="line">        snapshot save           Stores an etcd node backend snapshot to a given file</span><br><span class="line">        snapshot status         Gets backend snapshot status of a given file</span><br><span class="line">        txn                     Txn processes all the requests in one transaction</span><br><span class="line">        user add                Adds a new user</span><br><span class="line">        user delete             Deletes a user</span><br><span class="line">        user get                Gets detailed information of a user</span><br><span class="line">        user grant-role         Grants a role to a user</span><br><span class="line">        user list               Lists all users</span><br><span class="line">        user passwd             Changes password of user</span><br><span class="line">        user revoke-role        Revokes a role from a user</span><br><span class="line">        version                 Prints the version of etcdctl</span><br><span class="line">        watch                   Watches events stream on keys or prefixes</span><br><span class="line"></span><br><span class="line">OPTIONS:</span><br><span class="line">      --cacert=&quot;&quot;                               verify certificates of TLS-enabled secure servers using this CA bundle</span><br><span class="line">      --cert=&quot;&quot;                                 identify secure client using this TLS certificate file</span><br><span class="line">      --command-timeout=5s                      timeout for short running command (excluding dial timeout)</span><br><span class="line">      --debug[=false]                           enable client-side debug logging</span><br><span class="line">      --dial-timeout=2s                         dial timeout for client connections</span><br><span class="line">  -d, --discovery-srv=&quot;&quot;                        domain name to query for SRV records describing cluster endpoints</span><br><span class="line">      --discovery-srv-name=&quot;&quot;                   service name to query when using DNS discovery</span><br><span class="line">      --endpoints=[127.0.0.1:2379]              gRPC endpoints</span><br><span class="line">  -h, --help[=false]                            help for etcdctl</span><br><span class="line">      --hex[=false]                             print byte strings as hex encoded strings</span><br><span class="line">      --insecure-discovery[=true]               accept insecure SRV records describing cluster endpoints</span><br><span class="line">      --insecure-skip-tls-verify[=false]        skip server certificate verification (CAUTION: this option should be enabled only for testing purposes)</span><br><span class="line">      --insecure-transport[=true]               disable transport security for client connections</span><br><span class="line">      --keepalive-time=2s                       keepalive time for client connections</span><br><span class="line">      --keepalive-timeout=6s                    keepalive timeout for client connections</span><br><span class="line">      --key=&quot;&quot;                                  identify secure client using this TLS key file</span><br><span class="line">      --password=&quot;&quot;                             password for authentication (if this option is used, --user option shouldn&apos;t include password)</span><br><span class="line">      --user=&quot;&quot;                                 username[:password] for authentication (prompt if password is not supplied)</span><br><span class="line">  -w, --write-out=&quot;simple&quot;                      set the output format (fields, json, protobuf, simple, table)</span><br></pre></td></tr></table></figure><h5 id="客户端包"><a href="#客户端包" class="headerlink" title="客户端包"></a>客户端包</h5><blockquote><p>安装</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get go.etcd.io/etcd/clientv3</span><br></pre></td></tr></table></figure><blockquote><p>put、get</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;context&quot;</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;time&quot;</span><br><span class="line"></span><br><span class="line">&quot;go.etcd.io/etcd/clientv3&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// etcd client put/get demo</span><br><span class="line">// use etcd/clientv3</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">cli, err := clientv3.New(clientv3.Config&#123;</span><br><span class="line">Endpoints:   []string&#123;&quot;127.0.0.1:2379&quot;&#125;,</span><br><span class="line">DialTimeout: 5 * time.Second,</span><br><span class="line">&#125;)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">// handle error!</span><br><span class="line">fmt.Printf(&quot;connect to etcd failed, err:%v\n&quot;, err)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">    fmt.Println(&quot;connect to etcd success&quot;)</span><br><span class="line">defer cli.Close()</span><br><span class="line">// put</span><br><span class="line">ctx, cancel := context.WithTimeout(context.Background(), time.Second)</span><br><span class="line">_, err = cli.Put(ctx, &quot;q1mi&quot;, &quot;dsb&quot;)</span><br><span class="line">cancel()</span><br><span class="line">if err != nil &#123;</span><br><span class="line">fmt.Printf(&quot;put to etcd failed, err:%v\n&quot;, err)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">// get</span><br><span class="line">ctx, cancel = context.WithTimeout(context.Background(), time.Second)</span><br><span class="line">resp, err := cli.Get(ctx, &quot;q1mi&quot;)</span><br><span class="line">cancel()</span><br><span class="line">if err != nil &#123;</span><br><span class="line">fmt.Printf(&quot;get from etcd failed, err:%v\n&quot;, err)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">for _, ev := range resp.Kvs &#123;</span><br><span class="line">fmt.Printf(&quot;%s:%s\n&quot;, ev.Key, ev.Value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>watch</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;context&quot;</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;time&quot;</span><br><span class="line"></span><br><span class="line">&quot;go.etcd.io/etcd/clientv3&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// watch demo</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">cli, err := clientv3.New(clientv3.Config&#123;</span><br><span class="line">Endpoints:   []string&#123;&quot;127.0.0.1:2379&quot;&#125;,</span><br><span class="line">DialTimeout: 5 * time.Second,</span><br><span class="line">&#125;)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">fmt.Printf(&quot;connect to etcd failed, err:%v\n&quot;, err)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(&quot;connect to etcd success&quot;)</span><br><span class="line">defer cli.Close()</span><br><span class="line">// watch key:q1mi change</span><br><span class="line">rch := cli.Watch(context.Background(), &quot;q1mi&quot;) // &lt;-chan WatchResponse</span><br><span class="line">for wresp := range rch &#123;</span><br><span class="line">for _, ev := range wresp.Events &#123;</span><br><span class="line">fmt.Printf(&quot;Type: %s Key:%s Value:%s\n&quot;, ev.Type, ev.Kv.Key, ev.Kv.Value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>lease 租约</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">// etcd lease</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;time&quot;</span><br><span class="line">&quot;context&quot;</span><br><span class="line">&quot;log&quot;</span><br><span class="line"></span><br><span class="line">&quot;go.etcd.io/etcd/clientv3&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">cli, err := clientv3.New(clientv3.Config&#123;</span><br><span class="line">Endpoints:   []string&#123;&quot;127.0.0.1:2379&quot;&#125;,</span><br><span class="line">DialTimeout: time.Second * 5,</span><br><span class="line">&#125;)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(&quot;connect to etcd success.&quot;)</span><br><span class="line">defer cli.Close()</span><br><span class="line"></span><br><span class="line">// 创建一个5秒的租约</span><br><span class="line">resp, err := cli.Grant(context.TODO(), 5)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 5秒钟之后, /nazha/ 这个key就会被移除</span><br><span class="line">_, err = cli.Put(context.TODO(), &quot;/nazha/&quot;, &quot;dsb&quot;, clientv3.WithLease(resp.ID))</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>keepAlive</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;context&quot;</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;log&quot;</span><br><span class="line">&quot;time&quot;</span><br><span class="line"></span><br><span class="line">&quot;go.etcd.io/etcd/clientv3&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// etcd keepAlive</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">cli, err := clientv3.New(clientv3.Config&#123;</span><br><span class="line">Endpoints:   []string&#123;&quot;127.0.0.1:2379&quot;&#125;,</span><br><span class="line">DialTimeout: time.Second * 5,</span><br><span class="line">&#125;)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(&quot;connect to etcd success.&quot;)</span><br><span class="line">defer cli.Close()</span><br><span class="line"></span><br><span class="line">resp, err := cli.Grant(context.TODO(), 5)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_, err = cli.Put(context.TODO(), &quot;/nazha/&quot;, &quot;dsb&quot;, clientv3.WithLease(resp.ID))</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// the key &apos;foo&apos; will be kept forever</span><br><span class="line">ch, kaerr := cli.KeepAlive(context.TODO(), resp.ID)</span><br><span class="line">if kaerr != nil &#123;</span><br><span class="line">log.Fatal(kaerr)</span><br><span class="line">&#125;</span><br><span class="line">for &#123;</span><br><span class="line">ka := &lt;-ch</span><br><span class="line">fmt.Println(&quot;ttl:&quot;, ka.TTL)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>分布式锁</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;log&quot;</span><br><span class="line">&quot;go.etcd.io/etcd/clientv3/concurrency&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">cli, err := clientv3.New(clientv3.Config&#123;Endpoints: endpoints&#125;)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">defer cli.Close()</span><br><span class="line"></span><br><span class="line">// 创建两个单独的会话用来演示锁竞争</span><br><span class="line">s1, err := concurrency.NewSession(cli)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">defer s1.Close()</span><br><span class="line">m1 := concurrency.NewMutex(s1, &quot;/my-lock/&quot;)</span><br><span class="line"></span><br><span class="line">s2, err := concurrency.NewSession(cli)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">defer s2.Close()</span><br><span class="line">m2 := concurrency.NewMutex(s2, &quot;/my-lock/&quot;)</span><br><span class="line"></span><br><span class="line">// 会话s1获取锁</span><br><span class="line">if err := m1.Lock(context.TODO()); err != nil &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(&quot;acquired lock for s1&quot;)</span><br><span class="line"></span><br><span class="line">m2Locked := make(chan struct&#123;&#125;)</span><br><span class="line">go func() &#123;</span><br><span class="line">defer close(m2Locked)</span><br><span class="line">// 等待直到会话s1释放了/my-lock/的锁</span><br><span class="line">if err := m2.Lock(context.TODO()); err != nil &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">if err := m1.Unlock(context.TODO()); err != nil &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(&quot;released lock for s1&quot;)</span><br><span class="line"></span><br><span class="line">&lt;-m2Locked</span><br><span class="line">fmt.Println(&quot;acquired lock for s2&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">acquired lock for s1</span><br><span class="line">released lock for s1</span><br><span class="line">acquired lock for s2</span><br></pre></td></tr></table></figure></p><blockquote><p>参考文献</p><ul><li><a href="https://etcd.io/docs/v3.4.0/demo/" target="_blank" rel="noopener">https://etcd.io/docs/v3.4.0/demo/</a></li><li><a href="https://github.com/etcd-io/etcd/releases" target="_blank" rel="noopener">https://github.com/etcd-io/etcd/releases</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;etcd-简单介绍&quot;&gt;&lt;a href=&quot;#etcd-简单介绍&quot; class=&quot;headerlink&quot; title=&quot;etcd 简单介绍&quot;&gt;&lt;/a&gt;etcd 简单介绍&lt;/h3&gt;&lt;p&gt;etcd 是一个高可用的分布式 key-value 数据存储系统，内部采用 &lt;code&gt;Raft&lt;/code&gt; 协议作为一致性算法，基于 Go 语言实现。&lt;/p&gt;
&lt;p&gt;主要特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简单：提供明确的定义、面向用户的 API（gRPC）&lt;/li&gt;
&lt;li&gt;安全：支持 TLS客户端证书认证&lt;/li&gt;
&lt;li&gt;快速：基准测试每秒 10000 写入&lt;/li&gt;
&lt;li&gt;可靠：使用 Raft 算法保证一致性&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="微服务" scheme="https://jiawea.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="etcd" scheme="https://jiawea.github.io/tags/etcd/"/>
    
  </entry>
  
  <entry>
    <title>Golang map实现原理</title>
    <link href="https://jiawea.github.io/2020/11/22/Go_map/"/>
    <id>https://jiawea.github.io/2020/11/22/Go_map/</id>
    <published>2020-11-22T12:00:54.000Z</published>
    <updated>2020-11-24T06:55:09.955Z</updated>
    
    <content type="html"><![CDATA[<h3 id="map数据结构"><a href="#map数据结构" class="headerlink" title="map数据结构"></a>map数据结构</h3><p>在介绍<code>map</code>之前，先来看看它的数据结构，<code>map</code>实际上就是一个散列表，指向一堆桶<code>buckets</code>。通过哈希函数计算出<code>key</code>的值，然后再存储到每个桶<code>bmap</code>中，每个<code>bmap</code>可以存储 8 组键值对。为了加速<code>hash</code>定位桶，<code>bmap</code>里记录了<code>tophash</code>数组，记录了<code>key</code>的哈希高 8 位，通过比较不同键的哈希的高 8 位可以减少访问键值对的次数。</p><p>内部结构图：</p><p><center><img src="/static/go_map/data_struct.png" alt="结构图"></center><br><a id="more"></a></p><p>源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">type hmap struct &#123;</span><br><span class="line">    count     int   </span><br><span class="line">    flags     uint8             // 状态标示：iterator  = 1，oldIterator = 2，hashWriting = 4，sameSizeGrow = 8；</span><br><span class="line">    B         uint8             // 桶的个数 = 2^B</span><br><span class="line">    noverflow uint16            // 溢出桶的个数，B&lt;16时为精确值，否则为近似值；</span><br><span class="line">    hash0     uint32 </span><br><span class="line"></span><br><span class="line">    buckets    unsafe.Pointer   // 当前桶，长度为（0-2^B）</span><br><span class="line">    oldbuckets unsafe.Pointer   // 扩容时保存的旧桶；</span><br><span class="line">    nevacuate  uintptr          // 迁移数，下一个迁移的桶；</span><br><span class="line"></span><br><span class="line">    extra *mapextra             // 溢出桶</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 额外记录overflow桶信息</span><br><span class="line">type mapextra struct &#123;</span><br><span class="line">    overflow     *[]*bmap       // 没有指针时，溢出桶挂在这；</span><br><span class="line">    oldoverflow  *[]*bmap</span><br><span class="line">    nextOverflow *bmap          // map初始化时，预分配了一些溢出桶；</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 桶结构 （字段会根据key和elem类型动态生成，见下边bmap）</span><br><span class="line">type bmap struct &#123;</span><br><span class="line">  // 记录桶内8个单元的高8位hash值，或标记空桶状态，用于快速定位key</span><br><span class="line">  // emptyRest      = 0 // 此单元为空，且更高索引的单元也为空</span><br><span class="line">  // emptyOne       = 1 // 此单元为空</span><br><span class="line">  // evacuatedX     = 2 // 用于表示扩容迁移到新桶前半段区间</span><br><span class="line">  // evacuatedY     = 3 // 用于表示扩容迁移到新桶后半段区间</span><br><span class="line">  // evacuatedEmpty = 4 // 用于表示此单元已迁移</span><br><span class="line">  // minTopHash     = 5 // 最小的空桶标记值，小于其则是空桶标志</span><br><span class="line">  tophash [bucketCnt]uint8</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// cmd/compile/internal/gc/reflect.go</span><br><span class="line">type bmap struct &#123;</span><br><span class="line">    topbits  [8]uint8           // 每个key哈希值的高8位，加速访问；</span><br><span class="line">    keys     [8]keytype         // 先key后value，节省内存；</span><br><span class="line">    elems    [8]elemtype</span><br><span class="line">    // overflow 溢出桶</span><br><span class="line">    // otyp 类型为指针*Type,</span><br><span class="line">    // 若keytype及elemtype不含指针，则为uintptr</span><br><span class="line">    // 使bmap整体不含指针,避免gc去scan此类map</span><br><span class="line">    overflow otyp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="hash方式"><a href="#hash方式" class="headerlink" title="hash方式"></a>hash方式</h3><p>哈希表是计算机科学中最重要的数据结构之一，读写性能很高，时间复杂度是<code>O(1)</code>。</p><h4 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h4><p>哈希函数的选择在很大程度上能够决定哈希表的读写性能，尽可能的让哈希函数的结构均匀分布，会减少哈希冲突导致的读写性能变差的情况。</p><h4 id="哈希冲突"><a href="#哈希冲突" class="headerlink" title="哈希冲突"></a>哈希冲突</h4><p>解决哈希冲突一般有两种：</p><p><strong>开放寻址法</strong></p><p>开放寻址法核心思想是对数组中的元素依次探测和比较以判断目标键值对是否存在于哈希表中，即遇到哈希冲突时，就会将键值对写入到下一个不为空的位置。查找对应key会继续查找后面的元素，直到内存为空或者找到目标元素。</p><p><strong>拉链法</strong></p><p>拉链法一般会使用数组加上链表，不过有一些语言会在拉链法的哈希中引入红黑树以优化性能，拉链法会使用链表数组作为哈希底层的数据结构。<br>当我们需要将一个键值对，如 (Key6, Value6) 写入哈希表时，键值对中的键 Key6 都会先经过一个哈希函数，哈希函数返回的哈希会帮助我们选择一个桶，和开放地址法一样，选择桶的方式就是直接对哈希返回的结果取模：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mod := hash(&quot;Key6&quot;) % array.len</span><br></pre></td></tr></table></figure></p><p>选择了桶后就会遍历当前桶中的链表了，在遍历链表的过程中会遇到以下两种情况：</p><ol><li>找到键相同的键值对 —— 更新键对应的值；</li><li>没有找到键相同的键值对 —— 在链表的末尾追加新键值对；</li></ol><h3 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h3><p>随着哈希表中元素的增加，会逐渐影响哈希的性能，所以我们需要更多的桶和更大的内容保证哈希的读写性能。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">func mapassign(t *maptype, h *hmap, key unsafe.Pointer) unsafe.Pointer &#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">    // If we hit the max load factor or we have too many overflow buckets,</span><br><span class="line">// and we&apos;re not already in the middle of growing, start growing.</span><br><span class="line">if !h.growing() &amp;&amp; (overLoadFactor(h.count+1, h.B) || tooManyOverflowBuckets(h.noverflow, h.B)) &#123;</span><br><span class="line">hashGrow(t, h)</span><br><span class="line">goto again</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>扩容条件：</p><ol><li>装载因子<code>overLoadFactor</code>大于 6.5；</li><li>哈希使用了太多溢出桶，次数会等量扩容，垃圾回收会清理老的溢出桶并释放内存，使 <code>bmap</code> 中的键值对更加紧凑，提高性能。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">装载因子 := 元素数量 / 桶数量</span><br></pre></td></tr></table></figure><p>一般当<code>overLoadFactor</code>大于 6.5 时，会扩容一倍。在扩容的过程中不会一下子把数据全部迁移至新的桶中，采用<strong>渐近式扩容</strong>，<code>buckets</code>指向新桶，<code>oldbuckets</code>指向要迁移的桶，<code>nevacuate</code>表示下一个要迁移的桶，每当对数据进行读写时，都会看是否需要进行部分迁移，以防全部迁移时产生的瞬间抖动。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>Go 语言使用拉链法来解决哈希碰撞的问题实现了哈希表，它的访问、写入和删除等操作都在编译期间转换成了运行时的函数或者方法。</li><li>哈希在每一个桶中存储键对应哈希的前 8 位，当对哈希进行操作时，这些 tophash 就成为了一级缓存帮助哈希快速遍历桶中元素，每一个桶都只能存储 8 个键值对，一旦当前哈希的某个桶超出 8 个，新的键值对就会被存储到哈希的溢出桶中。</li><li>随着键值对数量的增加，溢出桶的数量和哈希的装载因子也会逐渐升高，超过一定范围就会触发扩容，扩容会将桶的数量翻倍，元素再分配的过程也是在调用写操作时增量进行的，不会造成性能的瞬时巨大抖动。</li></ul><h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><ul><li><a href="https://github.com/golang/go/blob/36f30ba289e31df033d100b2adb4eaf557f05a34/src/runtime/map.go#L115:6" target="_blank" rel="noopener">Golang源码</a></li><li><a href="https://draveness.me/golang/docs/part2-foundation/ch03-datastructure/golang-hashmap/" target="_blank" rel="noopener">Go语言设计与实现</a></li><li><a href="http://blog.newbmiao.com/2020/02/04/dig101-golang-map.html" target="_blank" rel="noopener">Dig101:Go之读懂map的底层设计</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;map数据结构&quot;&gt;&lt;a href=&quot;#map数据结构&quot; class=&quot;headerlink&quot; title=&quot;map数据结构&quot;&gt;&lt;/a&gt;map数据结构&lt;/h3&gt;&lt;p&gt;在介绍&lt;code&gt;map&lt;/code&gt;之前，先来看看它的数据结构，&lt;code&gt;map&lt;/code&gt;实际上就是一个散列表，指向一堆桶&lt;code&gt;buckets&lt;/code&gt;。通过哈希函数计算出&lt;code&gt;key&lt;/code&gt;的值，然后再存储到每个桶&lt;code&gt;bmap&lt;/code&gt;中，每个&lt;code&gt;bmap&lt;/code&gt;可以存储 8 组键值对。为了加速&lt;code&gt;hash&lt;/code&gt;定位桶，&lt;code&gt;bmap&lt;/code&gt;里记录了&lt;code&gt;tophash&lt;/code&gt;数组，记录了&lt;code&gt;key&lt;/code&gt;的哈希高 8 位，通过比较不同键的哈希的高 8 位可以减少访问键值对的次数。&lt;/p&gt;
&lt;p&gt;内部结构图：&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src=&quot;/static/go_map/data_struct.png&quot; alt=&quot;结构图&quot;&gt;&lt;/center&gt;&lt;br&gt;
    
    </summary>
    
      <category term="后端" scheme="https://jiawea.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="源码" scheme="https://jiawea.github.io/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="Golang" scheme="https://jiawea.github.io/tags/Golang/"/>
    
      <category term="map" scheme="https://jiawea.github.io/tags/map/"/>
    
  </entry>
  
  <entry>
    <title>Golang并发之Goroutine</title>
    <link href="https://jiawea.github.io/2020/11/21/Go_goroutine/"/>
    <id>https://jiawea.github.io/2020/11/21/Go_goroutine/</id>
    <published>2020-11-21T02:44:18.000Z</published>
    <updated>2020-11-24T06:55:25.334Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h3><p>Golang 中的并发指的是一个函数拥有独立于其他函数运行的能力，当创建一个<code>goroutine</code>时，Go 会将其视为一个独立的工作单元，然后会被调度到可用的逻辑处理器上执行。 Go 语言运行时的调度器能够管理所有的<code>goroutine</code>并为其分配执行时间。调度器是在操作系统之上的，将操作系统的线程与程序运行时的逻辑处理器绑定，并在逻辑处理器上运行<code>goroutine</code>。调度器在任何给定的时间，都会控制哪个<code>goroutine</code>在哪个逻辑处理器上执行。</p><p>Golang 的并发同步模型来自一个叫做<strong>通讯顺序程序（Communicating Sequential Processes, CSP）</strong>的范型。<code>CSP</code>是一种消息传递模型。在<code>goroutine</code>之间同步和传递数据是通过通道<code>channel</code>实现的，而不是通过对数据加锁来实现同步访问。</p><a id="more"></a><h3 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h3><p>什么是进程(process)和线程(thread)？<br>当应用程序在运行时，操作系统就会为其启动一个进程。可以将这个进程看成作一个包含了应用程序在运行中需要用到和维护的各种资源的容器。</p><p>下图展示了一个包含所有可能分配的常用资源的进程。这些资源包括但不限于内存地址空间、文件和设备的句柄以及线程。一个线程是一个<strong>执行空间</strong>，这个空间会被操作系统调度至物理处理器上来运行函数中的代码。每个进程至少包含一个线程，每个进程的初始化线程被称为<strong>主线程</strong>，一个进程里的所有线程共享所有资源，当主线程终止时，应用程序也会停止。</p><center><img src="/static/goroutine/process.png" alt="进程与线程"></center><h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><p>操作系统会在物理处理器上调度线程来运行，而 Go 语言的运行时会在逻辑处理器上调度<code>goroutine</code>来运行。每个逻辑处理器都分别绑定到单个操作系统线程。</p><p>在下图中可以看到操作系统线程、逻辑处理器和本地运行队列之间的关系。如果创建一个<code>goroutine</code>并准备运行，这个<code>goroutine</code>就会被放到调度器的全局运行队列中。之后调度器就会将这些队列中的<code>goroutine</code>分配给一个逻辑处理器（单进程），并放到逻辑处理器对应的本地运行队列中。本地运行队列中的<code>goroutine</code>会一直等待直到自己被分配的逻辑处理器执行。</p><center><img src="/static/goroutine/gpm-1.png" alt="GPM"></center><p>有时正在运行的<code>goroutine</code>需要执行一个阻塞的系统调用时，如打开一个文件。当这类调用发生时，线程和<code>goroutine</code>会从逻辑处理器上分离，该线程会继续阻塞，等待系统调用的返回。此时逻辑处理器就失去了用来运行的线程，所以调度器会创建一个新的线程并绑定到该逻辑处理器上。然后调度器会从本地运行队列里选择另外一个<code>goroutine</code>来运行，一旦被阻塞的系统调用执行完成并返回，其<code>goroutine</code>会被放回本地运行队列，而之前的线程会被保留，以便之后使用。</p><p>如果一个<code>goroutine</code>需要做一个网络<code>I/O</code>调用，流程上会有些不一样。<code>goroutine</code>会和逻辑处理器分离，并移动到集成了<strong>网络轮训器</strong>，一旦该轮训器指示某个网络读写操作就绪，对应的<code>goroutine</code>就会重新分配到逻辑处理器上完成操作。</p><h3 id="并行"><a href="#并行" class="headerlink" title="并行"></a>并行</h3><p>并发（concurrency）不是并行（parallelism）。并行是让多个代码片段同时在不同的物理处理器上执行。并行的关键是同时做很多事情，而并发是同时管理很多事情，这些事可能只做了一半就暂停去做别的事情了。</p><p>如果希望<code>goroutine</code>并行，必须使用多于一个逻辑处理器。当有多个逻辑处理器时，调度器会将<code>goroutine</code>平等分配到每个逻辑处理器上。这会让<code>goroutine</code>在不同的线程上运行。当然运行的机器要有多个物理处理器，否则达不到并行的效果。</p><center><img src="/static/goroutine/gpm-2.png" alt="GPM"></center><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ol><li>分配一个逻辑处理器，启动两个<code>goroutine</code>，分别打印出5000以内的素数。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">// 这个示例程序展示goroutine调度器是如何在单个线程上</span><br><span class="line">// 切分时间片的</span><br><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;runtime&quot;</span><br><span class="line">&quot;sync&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">//   wg用来等待程序完成</span><br><span class="line">var wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">// 分配一个逻辑处理器给调度器使用</span><br><span class="line">runtime.GOMAXPROCS(1)</span><br><span class="line">wg.Add(2)</span><br><span class="line">fmt.Println(&quot;Create Goroutines&quot;)</span><br><span class="line"></span><br><span class="line">go printPrime(&quot;A&quot;)</span><br><span class="line">go printPrime(&quot;B&quot;)</span><br><span class="line"></span><br><span class="line">fmt.Println(&quot;Waiting To   Finish&quot;)</span><br><span class="line">wg.Wait()</span><br><span class="line">fmt.Println(&quot;Terminating Program&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// printPrime 显示5000以内的素数值(大于1，除了1和本身外不能被整除)</span><br><span class="line">func printPrime(prefix string) &#123;</span><br><span class="line">defer wg.Done()</span><br><span class="line">next:</span><br><span class="line">for outer := 2; outer &lt; 5000; outer++ &#123;</span><br><span class="line">for inner := 2; inner &lt; outer; inner++ &#123;</span><br><span class="line">if outer%inner == 0 &#123;</span><br><span class="line">continue next</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(&quot;%s:%d\n&quot;, prefix, outer)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(&quot;Completed&quot;, prefix)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行完上面的代码后，你会发现在并发情况下，有可能 A 先执行完，也有可能 B 先执行完，因为当 goroutine 被调度器分配给逻辑处理器执行是有执行时间的，当 A 或 B 没执行完时，有可能被切换到另一个 goroutine 执行了，所以你看到的结果会出现：A 和 B 都是各自打印了一段最终才是结束的。</p><p>如果把<code>runtime.GOMAXPROCS(1)</code>改成 <code>2</code> 呢？<br>这时候 A 和 B是并行执行的，而不是并发了。</p><h5 id="参考书籍："><a href="#参考书籍：" class="headerlink" title="参考书籍："></a>参考书籍：</h5><ul><li>Go语言实战</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-介绍&quot;&gt;&lt;a href=&quot;#1-介绍&quot; class=&quot;headerlink&quot; title=&quot;1.介绍&quot;&gt;&lt;/a&gt;1.介绍&lt;/h3&gt;&lt;p&gt;Golang 中的并发指的是一个函数拥有独立于其他函数运行的能力，当创建一个&lt;code&gt;goroutine&lt;/code&gt;时，Go 会将其视为一个独立的工作单元，然后会被调度到可用的逻辑处理器上执行。 Go 语言运行时的调度器能够管理所有的&lt;code&gt;goroutine&lt;/code&gt;并为其分配执行时间。调度器是在操作系统之上的，将操作系统的线程与程序运行时的逻辑处理器绑定，并在逻辑处理器上运行&lt;code&gt;goroutine&lt;/code&gt;。调度器在任何给定的时间，都会控制哪个&lt;code&gt;goroutine&lt;/code&gt;在哪个逻辑处理器上执行。&lt;/p&gt;
&lt;p&gt;Golang 的并发同步模型来自一个叫做&lt;strong&gt;通讯顺序程序（Communicating Sequential Processes, CSP）&lt;/strong&gt;的范型。&lt;code&gt;CSP&lt;/code&gt;是一种消息传递模型。在&lt;code&gt;goroutine&lt;/code&gt;之间同步和传递数据是通过通道&lt;code&gt;channel&lt;/code&gt;实现的，而不是通过对数据加锁来实现同步访问。&lt;/p&gt;
    
    </summary>
    
      <category term="后端" scheme="https://jiawea.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Golang" scheme="https://jiawea.github.io/tags/Golang/"/>
    
      <category term="Goroutine" scheme="https://jiawea.github.io/tags/Goroutine/"/>
    
  </entry>
  
  <entry>
    <title>MySQL是如何执行SQL更新语句的</title>
    <link href="https://jiawea.github.io/2020/08/22/MySQL_update/"/>
    <id>https://jiawea.github.io/2020/08/22/MySQL_update/</id>
    <published>2020-08-22T06:27:58.000Z</published>
    <updated>2020-11-24T02:17:39.575Z</updated>
    
    <content type="html"><![CDATA[<p>用了这么久数据库，却不知道数据库是如何执行我们输入的语句的，经过一番查阅后，记录下执行一条查询和更新SQL语句后，MySQL是如何工作的。</p><p>SQL语句基本的执行链路：</p><center><img src="/static/mysql/liucheng.png" alt="流程"></center><a id="more"></a><h3 id="1-查询语句是如何执行"><a href="#1-查询语句是如何执行" class="headerlink" title="1 查询语句是如何执行"></a>1 查询语句是如何执行</h3><p>一条查询语句的执行过程一般是经过连接器、分析器、优化器、执行器等功能模块，最后到达存储引擎</p><h3 id="2-更新语句是如何执行"><a href="#2-更新语句是如何执行" class="headerlink" title="2 更新语句是如何执行"></a>2 更新语句是如何执行</h3><p>一条更新语句的执行过程和查询的执行过程是一样的：<br>以执行这条SQL语句为例。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; update T set c=c+1 where ID=2;</span><br></pre></td></tr></table></figure></p><ol><li>连接器：连接数据库。</li><li>分析器：分析器通过词法和语法解析知道这是一条更新语句，</li><li>优化器：决定使用ID这个索引。</li><li>执行器：向存储引擎读取这一行数据，然后更新并写入存储引擎。</li></ol><h3 id="2-重要的日志模块"><a href="#2-重要的日志模块" class="headerlink" title="2 重要的日志模块"></a>2 重要的日志模块</h3><h4 id="redo-log"><a href="#redo-log" class="headerlink" title="redo log"></a>redo log</h4><p>让我们继续以上面一条SQL语句为例，看看<code>redo log</code>是起到了什么作用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; update T set c=c+1 where ID=2;</span><br></pre></td></tr></table></figure></p><p>MySQL在执行这条语句时，肯定是先把<code>ID=2</code>这条数据从搜索引擎中拿出来，然后修改<code>c</code>字段，写入存储引擎，最后存储引擎刷入磁盘，这没问题吧？</p><p>MySQL的基本存储结构是<code>页</code>，所以MySQL是先把这条记录所在的<code>页</code>找到，然后再把该页的数据加载到内存，在内存中找到对应的数据后修改，再刷回磁盘。</p><p><strong>问题1</strong><br>如果在内存把数据修改了，但是还没来得及刷回磁盘数据库却突然岩机了怎么办？很显然数据就丢失了，这和我们预期的不一样。</p><p><strong>如何解决</strong><br>也许你会说很简单阿，在事务提交之前写入磁盘就行了。</p><p><strong>问题2</strong><br>如果每一次更新操作都需要刷回磁盘，这整个过程<code>IO</code>成本、查找记录成本都很高。一个页有<code>16kb</code>大小，只改一点内容就操作一次磁盘，为了解决这个问题。MySQL引入了<code>WAL</code>这么一个概念（Write-Ahead Logging），先写入日志，再写磁盘，至于什么时候再写入磁盘，会有配置供我们设置。</p><p>此时就引入<code>redo log</code>，当数据修改的时候，不仅在内存中操作，还会在<code>redo log</code>中记录这次操作，此时<code>redo log</code>的状态为<code>prepare</code>。当事务提交的时<code>redo log</code>日志将从<code>prepare</code>状态修改为<code>commit</code>，也就是我们所说的<strong>两阶段提交</strong>，然后再根据需要将更新完的数据刷入磁盘。当数据库岩机重启的时候，之前提交的记录都不会丢失，会恢复<code>redo log</code>中的内容到数据库，再根据<code>undo log</code>和<code>binlog</code>决定回滚还是提交数据。这个能力称为<code>crash-safe</code>。</p><p><code>redo log</code>记录的是物理变化，即内容修改（在某个数据页上做了什么修改）。它也是需要磁盘的，但它的好处是<code>顺序IO</code>，比<code>随机IO</code>快多了。</p><h4 id="undo-log"><a href="#undo-log" class="headerlink" title="undo log"></a>undo log</h4><p><code>undo log</code>是用来保证事务的原子性，它记录数据被修改前的值，以便在事务失败的时候进行<code>rollback</code>。举个栗子，当事务提交成功后，在将<code>redo log</code>从<code>perpare</code>状态修改成<code>commit</code>时系统异常重启了，那么<code>redo log</code>会根据自身的状态并结合<code>undo log</code>进行回滚。</p><h4 id="binlog"><a href="#binlog" class="headerlink" title="binlog"></a>binlog</h4><p>MySQL 整体来看，其实就有两块：一块是 Server 层，它主要做的是 MySQL 功能层面的事情；还有一块是引擎层，负责存储相关的具体事宜。<code>redo log</code>是<code>InnoDB</code>引擎特有的日志，而 Server 层也有自己的日志，称为 <code>binlog</code>（归档日志）。</p><p><code>binlog</code>记录了数据库表结构和表数据变更，比如<code>update/delete/insert/truncate/create</code>。它不会记录<code>select</code>（因为这没有对表没有进行变更）。</p><p>我们可以简单理解为：存储着每条变更的SQL语句。</p><h4 id="复制和恢复数据"><a href="#复制和恢复数据" class="headerlink" title="复制和恢复数据"></a>复制和恢复数据</h4><p>主要有两个作用：</p><ul><li>MySQL在公司使用的时候往往都是一主多从结构的，从服务器需要与主服务器的数据保持一致，这就是通过binlog来实现的。</li><li>数据库的数据被干掉了，我们可以通过binlog来对数据进行恢复。</li></ul><p>因为binlog记录了数据库表的变更，所以我们可以复制（主从复制)和恢复数据。</p><h4 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h4><p>有了对这两个日志的概念性理解，我们再来看执行器和<code>InnoDB</code>引擎在执行上面简单的<code>update</code>语句时的内部流程。</p><ol><li>执行器先找引擎取 ID=2 这一行。ID 是主键，引擎直接用树搜索找到这一行。如果 ID=2 这一行所在的数据页本来就在内存中，就直接返回给执行器；否则，需要先从磁盘读入内存，然后再返回。</li><li>执行器拿到引擎给的行数据，把这个值加上 1，比如原来是 N，现在就是 N+1，得到新的一行数据，再调用引擎接口写入这行新数据。</li><li>引擎将这行新数据更新到内存中，同时将这个更新操作记录到 redo log 里面，此时 redo log 处于 prepare 状态。然后告知执行器执行完成了，随时可以提交事务。</li><li>执行器生成这个操作的 binlog，并把 binlog 写入磁盘。</li><li>执行器调用引擎的提交事务接口，引擎把刚刚写入的 redo log 改成提交（commit）状态，更新完成。</li></ol><p>update 语句的执行流程图：</p><center><img src="/static/mysql/zxliucheng.png" alt="流程"></center><h3 id="3-redo-log和binlog的不同"><a href="#3-redo-log和binlog的不同" class="headerlink" title="3 redo log和binlog的不同"></a>3 redo log和binlog的不同</h3><h4 id="3-1-存储上"><a href="#3-1-存储上" class="headerlink" title="3.1 存储上"></a>3.1 存储上</h4><p>redo log 是物理日志，记录的是“在某个数据页上做了什么修改”；binlog 是逻辑日志，记录的是这个语句的原始逻辑，比如“给 ID=2 这一行的 c 字段加 1 ”。</p><h4 id="3-2-功能"><a href="#3-2-功能" class="headerlink" title="3.2 功能"></a>3.2 功能</h4><p>redo log的作用是为<strong>持久化</strong>而生的。写完内存，如果数据库挂了，那我们可以通过redo log来恢复内存还没来得及刷到磁盘的数据，将redo log加载到内存里边，那内存就能恢复到挂掉之前的数据了。</p><p>binlog的作用是复制和恢复而生的。</p><p>主从服务器需要保持数据的一致性，通过binlog来同步数据。<br>如果整个数据库的数据都被删除了，binlog存储着所有的数据变更情况，那么可以通过binlog来对数据进行恢复。</p><p>那么如果整个数据库的数据都被删除了，那我可以用redo log的记录来恢复吗？</p><p>不能，因为功能的不同，redo log 存储的是物理数据的变更，如果我们内存的数据已经刷到了磁盘了，那redo log的数据就无效了。所以redo log不会存储着历史所有数据的变更，文件的内容会被覆盖的。</p><h4 id="3-3-写入细节"><a href="#3-3-写入细节" class="headerlink" title="3.3 写入细节"></a>3.3 写入细节</h4><p>redo log 是 InnoDB 引擎特有的；binlog 是 MySQL 的 Server 层实现的，所有引擎都可以使用。</p><h5 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h5><ul><li>极客时间，MySQL45讲</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用了这么久数据库，却不知道数据库是如何执行我们输入的语句的，经过一番查阅后，记录下执行一条查询和更新SQL语句后，MySQL是如何工作的。&lt;/p&gt;
&lt;p&gt;SQL语句基本的执行链路：&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/static/mysql/liucheng.png&quot; alt=&quot;流程&quot;&gt;&lt;/center&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://jiawea.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL" scheme="https://jiawea.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL事务和锁</title>
    <link href="https://jiawea.github.io/2020/07/18/MySQL_block/"/>
    <id>https://jiawea.github.io/2020/07/18/MySQL_block/</id>
    <published>2020-07-18T02:30:18.000Z</published>
    <updated>2020-11-20T01:49:58.215Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-事务"><a href="#1-事务" class="headerlink" title="1.事务"></a>1.事务</h3><h4 id="1-1-事务的概念"><a href="#1-1-事务的概念" class="headerlink" title="1.1 事务的概念"></a>1.1 事务的概念</h4><p>事务是一组连续的操作集合，MySQL中默认<code>AUTOCOMMIT</code>是为<code>1</code>，也就是说每一次请求都是一个独立的事务，即改请求会被立即执行。以<code>START TRANSACTION</code>;或<code>BEGIN</code>开始一个事务,以<code>COMMIT</code>或者<code>ROLLBACK</code>结束一次事务。</p><a id="more"></a><h4 id="1-2-事务的特性ACID"><a href="#1-2-事务的特性ACID" class="headerlink" title="1.2 事务的特性ACID"></a>1.2 事务的特性ACID</h4><p><strong>A 原子性</strong></p><p>一个事务必须保证其中的操作要么全部执行，要么全部回滚，不可能存在只执行了一部分这种情况出现。</p><p><strong>C 一致性</strong><br>数据必须保证从一种一致性的状态转换为另一种一致性状态。<br>比如上一个事务中执行了第二步时系统崩溃了，数据也不会出现bill的账户少了100块，但是tim的账户没变的情况。要么维持原装（全部回滚），要么bill少了100块同时tim多了100块，只有这两种一致性状态的。</p><p><strong>I 隔离性</strong><br>在一个事务未执行完毕时，通常会保证其他事务无法看到这个事务的执行结果。</p><p><strong>D 持久性</strong><br>事务一旦commit，则数据就会保存下来，即使提交完之后系统崩溃，数据也不会丢失。</p><h3 id="2-隔离级别"><a href="#2-隔离级别" class="headerlink" title="2.隔离级别"></a>2.隔离级别</h3><h4 id="2-1-读未提交"><a href="#2-1-读未提交" class="headerlink" title="2.1 读未提交"></a>2.1 读未提交</h4><p>会出现脏读。一事务未提交的中间状态的更新数据被其他会话读取到。</p><h4 id="2-2-读已提交"><a href="#2-2-读已提交" class="headerlink" title="2.2 读已提交"></a>2.2 读已提交</h4><p>解决脏读，会出现幻读。会话A事务中执行一次查询，然后会话A新插入一行满足A事务查询条件的记录，此时A事务重新查询时，导致A事务两次读取的数据不一致。</p><h4 id="2-3-可重复读"><a href="#2-3-可重复读" class="headerlink" title="2.3 可重复读"></a>2.3 可重复读</h4><p>解决幻读。</p><h4 id="2-4-串行化"><a href="#2-4-串行化" class="headerlink" title="2.4 串行化"></a>2.4 串行化</h4><p>最强的隔离级别，通过给事务中每次读取的行加锁，写加写锁，可能会导致大量超时以及锁争用问题。</p><h3 id="3-锁"><a href="#3-锁" class="headerlink" title="3.锁"></a>3.锁</h3><h5 id="3-1-共享锁（S）"><a href="#3-1-共享锁（S）" class="headerlink" title="3.1 共享锁（S）"></a>3.1 共享锁（S）</h5><p>共享锁也称为读锁，读锁允许多个连接可以同一时刻并发的读取同一资源,互不干扰</p><h5 id="3-2-排它锁（X）"><a href="#3-2-排它锁（X）" class="headerlink" title="3.2 排它锁（X）"></a>3.2 排它锁（X）</h5><p>排他锁也称为写锁，一个写锁会阻塞其他的写锁或读锁，保证同一时刻只有一个连接可以写入数据，同时防止其他用户对这个数据的读写。</p><h3 id="4-避免死锁"><a href="#4-避免死锁" class="headerlink" title="4.避免死锁"></a>4.避免死锁</h3><p>如何避免使用行锁<code>FOR UPDATE</code>时导致死锁问题：</p><ol><li>以固定的顺序访问数据，例如两个更新数据的事务，事务A更新数据的顺序为1，2；事务B更新数据的顺序为2，1。这样更可能会造成死锁。</li><li>在同一个事务中，尽可能做到一次锁定所需要的所有资源，减少死锁概率。</li><li>为表添加合理的索引。可以看到如果不走索引将会为表的每一行记录添加上锁，死锁的概率大大增大。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-事务&quot;&gt;&lt;a href=&quot;#1-事务&quot; class=&quot;headerlink&quot; title=&quot;1.事务&quot;&gt;&lt;/a&gt;1.事务&lt;/h3&gt;&lt;h4 id=&quot;1-1-事务的概念&quot;&gt;&lt;a href=&quot;#1-1-事务的概念&quot; class=&quot;headerlink&quot; title=&quot;1.1 事务的概念&quot;&gt;&lt;/a&gt;1.1 事务的概念&lt;/h4&gt;&lt;p&gt;事务是一组连续的操作集合，MySQL中默认&lt;code&gt;AUTOCOMMIT&lt;/code&gt;是为&lt;code&gt;1&lt;/code&gt;，也就是说每一次请求都是一个独立的事务，即改请求会被立即执行。以&lt;code&gt;START TRANSACTION&lt;/code&gt;;或&lt;code&gt;BEGIN&lt;/code&gt;开始一个事务,以&lt;code&gt;COMMIT&lt;/code&gt;或者&lt;code&gt;ROLLBACK&lt;/code&gt;结束一次事务。&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://jiawea.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL" scheme="https://jiawea.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>TCP/IP协议</title>
    <link href="https://jiawea.github.io/2020/06/26/TCP-IP/"/>
    <id>https://jiawea.github.io/2020/06/26/TCP-IP/</id>
    <published>2020-06-26T12:28:06.000Z</published>
    <updated>2024-03-09T06:38:39.330Z</updated>
    
    <content type="html"><![CDATA[<p>最近重新学习了计算机网络原理这一门课，趁着这机会，也对TCP/IP做一下总结吧。</p><h3 id="一、-计算机网络体系结构分层"><a href="#一、-计算机网络体系结构分层" class="headerlink" title="一、 计算机网络体系结构分层"></a>一、 计算机网络体系结构分层</h3><center><img src="/static/network/tx1.png" alt="avatar"></center><p>OSI模型和TCP/IP模型上有一些区别，每一层都是处理自己的事情，然后交给下一层处理。</p><a id="more"></a><h3 id="二、-TCP-IP协议"><a href="#二、-TCP-IP协议" class="headerlink" title="二、 TCP/IP协议"></a>二、 TCP/IP协议</h3><p>互联网协议套件（Internet Protocol Suite，IPS）是一个网络通讯模型，以及整个网络传输协议家族，为网际网络的基础通讯架构。它通常被称为<code>TCP/IP</code>协议族（TCP/IP Protocols），简称<code>TCP/IP</code>。</p><p><code>TCP</code>（传输控制协议）和<code>IP</code>（网际协议）是最先定义的两个核心协议，所以才统称为<code>TCP/IP</code>协议族</p><h3 id="三、-分层"><a href="#三、-分层" class="headerlink" title="三、 分层"></a>三、 分层</h3><p>TCP/IP协议族中有一个很重要一点就是分层管理，依次为以下四层，应用层，传输层，网络层，数据链路层（也有叫网络接口层/网际层）。应用层和传输层是计算机处理的，而下面两层则是通讯设备负责。</p><center><img src="/static/network/model.png" alt="avatar"></center><p>TCP/IP分层管理是有好处的，假如互联网只有一个协议统筹，某一个地方改变设计时，就需要把所有部分都替换掉，而分层只需要把变动的层替换掉即可。</p><h3 id="四、-应用层"><a href="#四、-应用层" class="headerlink" title="四、 应用层"></a>四、 应用层</h3><p>应用层是网络相关的程序为了通过网络与其他程序通信所使用的层。这个层的处理过程是应用特有的；数据从网络相关的程序以这种应用内部使用的格式进行传送，然后被编码成标准协议的格式。<br>例如我们所熟悉的：</p><ul><li>HTTP（万维网服务）</li><li>FTP（文件传输）</li><li>SMTP（电子邮件）</li><li>SSH（安全远程登陆）</li><li>DNS（名称<-> IP地址寻找,域名系统）</-></li></ul><p>应用层将数据编码成一个标准的应用层协议，然后将它传送到下一层（传输层）</p><h3 id="五、-传输层"><a href="#五、-传输层" class="headerlink" title="五、 传输层"></a>五、 传输层</h3><p>TCP/IP 中有两个具有代表性的传输层协议，分别是 TCP 和 UDP。</p><table><thead><tr><th style="text-align:center">特点</th><th style="text-align:center">TCP</th><th style="text-align:center">UDP</th></tr></thead><tbody><tr><td style="text-align:center">是否连接</td><td style="text-align:center">面向连接</td><td style="text-align:center">无连接</td></tr><tr><td style="text-align:center">是否可靠</td><td style="text-align:center">可靠传输，使用流量控制和拥塞控制</td><td style="text-align:center">不可靠传输，不使用流量控制和拥塞控制</td></tr><tr><td style="text-align:center">传输方式</td><td style="text-align:center">面向字节流</td><td style="text-align:center">面向报文</td></tr><tr><td style="text-align:center">首部开销</td><td style="text-align:center">首部最小20字节，最大60字节</td><td style="text-align:center">首部开销小，仅8字节</td></tr><tr><td style="text-align:center">场景</td><td style="text-align:center">适用于要求可靠传输的应用，例如文件传输</td><td style="text-align:center">适用于实时应用（IP电话、视频会议、直播等）</td></tr></tbody></table><h4 id="1-端口号"><a href="#1-端口号" class="headerlink" title="1.端口号"></a>1.端口号</h4><p>数据链路和 IP 中的地址，分别指的是 MAC 地址和 IP 地址。前者用来识别同一链路中不同的计算机，后者用来识别 TCP/IP  网络中互连的主机和路由器。在传输层也有这种类似于地址的概念，那就是端口号。端口号用来识别同一台计算机中进行通信的不同应用程序。因此，它也被称为程序地址。</p><p><strong>根据端口号识别应用程序</strong><br>一台计算机上同时可以运行多个程序。传输层协议正是利用这些端口号识别本机中正在进行通信的应用程序，并准确地将数据传输。</p><center><img src="/static/network/port.png" alt="avatar"></center><p><strong>根据IP 地址、端口号、协议号进行通信识别</strong><br>仅凭目标端口号识别某一个通信是远远不够的，所有还需要IP地址等，如：</p><center><img src="/static/network/ip-port1.png" alt="avatar"></center><br><center><img src="/static/network/ip-port2.png" alt="avatar"></center><h4 id="2-端口号的确认"><a href="#2-端口号的确认" class="headerlink" title="2.端口号的确认"></a>2.端口号的确认</h4><p>传输层端口号为16位整数。</p><ul><li>熟知端口号： <code>0~1023</code></li><li>登记端口号： <code>1024~49151</code></li><li>客户端口号/短暂端口号： <code>49152~65535</code></li></ul><h4 id="3-UDP"><a href="#3-UDP" class="headerlink" title="3.UDP"></a>3.UDP</h4><p>UDP是无连接服务，在数据传输之前无需与对端进行任何信息交换（握手），直接构造传输层报文段并向接收端发送。类似于邮政系统的信件通信，邮寄信件之前无需跟收件人交换任何信息，写好信件后直接交给投递员就好了。</p><h4 id="4-TCP"><a href="#4-TCP" class="headerlink" title="4.TCP"></a>4.TCP</h4><p>TCP是面向连接服务，在数据传输之前需要双方交换一些控制信息，建立逻辑连接，然后再传输数据，数据传输结束后还需要再拆除连接。类似于电话通讯，必须首先拨号，建立电话连接，对方接起电话后，才可以进行语音交互通信，通信结束后还需要挂断电话拆除连接。</p><h4 id="5-复用与分解"><a href="#5-复用与分解" class="headerlink" title="5.复用与分解"></a>5.复用与分解</h4><p>众多应用程序公用一个传输层协议，并能够实现将接收到的数据准确交互给不同的应用进程，要实现这一基本功能，称为<span style="border-bottom:2px dashed red;">传输层的多路复用和多路分解。</span></p><p>一个网络应用程序通过一个或多个套接字，实现与传输层之间的数据传递。因此，在接收主机中的传输层实际上并没有直接将数据交付给进程，而是先将数据交付给了与接收进程相关联的一个中间套接字，每个套接字都必须有唯一的标识符。这样传输层协议才能将数据交付给正确的套接字。</p><p>下面是UDP和TCP套接字的区别：</p><center><img src="/static/network/udp.png" alt="avatar"></center><br><center><img src="/static/network/tcp.png" alt="avatar"></center><h4 id="6-TCP报文结构"><a href="#6-TCP报文结构" class="headerlink" title="6.TCP报文结构"></a>6.TCP报文结构</h4><p><code>TCP</code>报文段由首部字段和一个数据字段组成，而报文是有限制大小的，当TCP发送一个大文件时，通常会把该文件划分为长度为<code>MSS</code>(最大报文长度，Maximum Segment Size)的若干块，每个数据封装了一个<code>TCP报文</code>分别发送，报文结构如下：</p><center><img src="/static/network/baowen.png" alt="avatar"></center><p><strong>序列号<code>SEQ</code>和确认号<code>ACK</code></strong><br><span style="border-bottom:2px dashed red;">TCP网络中，为了保障每个连接提供有保证和有序的字节传递，使用了<code>Sequence Number</code> (,序列号)和 <code>Acknowledgment Number</code>(确认号)，即<code>seq</code>和<code>ack</code>。</span></p><ul><li><code>seq</code>表示每次传输中字节的偏移量。</li><li><code>ack</code>表示期望下一次接收的<code>seq</code>是多少。</li></ul><p><strong>同步序列号<code>SYN</code></strong><br>当<code>SYN=1</code>时，表示该<code>TCP</code>报文段是一个建立新连接请求控制段或者是同意建立新连接的确认段（此时<code>ACK=1</code>）。</p><p><strong><code>FIN</code></strong><br><code>FIN</code>用来释放一个<code>TCP</code>连接，当<code>FIN=1</code>时，表明改<code>TCP</code>报文段的发送端数据已发送完毕，并请求释放连接。</p><h4 id="7-TCP三次握手"><a href="#7-TCP三次握手" class="headerlink" title="7.TCP三次握手"></a>7.TCP三次握手</h4><center><img src="/static/network/3.png" alt="avatar"></center><h4 id="8-TCP四次挥手"><a href="#8-TCP四次挥手" class="headerlink" title="8.TCP四次挥手"></a>8.TCP四次挥手</h4><center><img src="/static/network/4.png" alt="avatar"></center><h4 id="9-总结"><a href="#9-总结" class="headerlink" title="9.总结"></a>9.总结</h4><p>对于复杂的网络，<code>TCP</code>的实现提出了很多应对措施，其中包括为什么要三次握手和四次挥手，以及<code>TIME_WAIT</code>状态有什么作用。</p><h5 id="为什么要三次握手，不是两次"><a href="#为什么要三次握手，不是两次" class="headerlink" title="为什么要三次握手，不是两次"></a>为什么要三次握手，不是两次</h5><ul><li>为了实现可靠数据传输，通讯双方必须都维护一个序列号，用来标识发送出去的数据包中哪些被对方接收。三次握手的过程即是通讯双方相互告知序列号的起始值，并确认对方已经收到了序列号起始值。</li><li>如果只有两次握手的话，最多只有客户端的起始序号被确认，而服务端的序列号得不到确认。</li></ul><h5 id="四次挥手-TIME-WAIT"><a href="#四次挥手-TIME-WAIT" class="headerlink" title="四次挥手 TIME_WAIT"></a>四次挥手 TIME_WAIT</h5><p>从图中我们可以看到当客户端断开连接后最后会进入<code>TIME_WAIT</code>状态，那么保持这个状态有什么作用呢？</p><ul><li>在四次挥手中，客户端发送<code>FIN</code>，服务端接收后返回<code>ACK</code>确认，在确认所有数据发送完毕后会，再次发送<code>FIN</code>给客户端，客户端响应发送<code>ACK</code>并进入<code>TIME_WAIT</code>状态，等待2MSL最大分段寿命（MSL, Maximum Segment Lifetime）后关闭连接。<br>如果没有<code>TIME_WAIT</code>状态，客户端响应的<code>ACK</code>包丢失的话，服务端就会重发<code>FIN</code>包，当客户端接收到一个没有经过<code>TCP</code>连接的包时，会响应一个<code>RST</code>重置包，导致服务端异常。所以<code>TIME_WAIT</code>是为了保证<code>TCP</code>的正常关闭。</li><li>我们还知道，<code>TCP</code>报文传输过程中有可能不是顺序到达的，如果连接已经关闭了，此时客户端接收到了由于网络原因导致没有及时接收到服务端发送的数据包，客户端就会重新建立一个连接。所以<code>TIME_WAIT</code>的存在也是为了保证网络中迷失的数据包正常过期。</li><li>为何一定要等2MSL？<ul><li>如果不等，释放的端口可能会重连刚断开的服务器端口，这样依然存活在网络里的老的TCP报文可能与新TCP连接报文冲突，造成数据冲突。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近重新学习了计算机网络原理这一门课，趁着这机会，也对TCP/IP做一下总结吧。&lt;/p&gt;
&lt;h3 id=&quot;一、-计算机网络体系结构分层&quot;&gt;&lt;a href=&quot;#一、-计算机网络体系结构分层&quot; class=&quot;headerlink&quot; title=&quot;一、 计算机网络体系结构分层&quot;&gt;&lt;/a&gt;一、 计算机网络体系结构分层&lt;/h3&gt;&lt;center&gt;&lt;img src=&quot;/static/network/tx1.png&quot; alt=&quot;avatar&quot;&gt;&lt;/center&gt;

&lt;p&gt;OSI模型和TCP/IP模型上有一些区别，每一层都是处理自己的事情，然后交给下一层处理。&lt;/p&gt;
    
    </summary>
    
      <category term="网络" scheme="https://jiawea.github.io/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="TCP/IP" scheme="https://jiawea.github.io/tags/TCP-IP/"/>
    
  </entry>
  
  <entry>
    <title>使用Supervisor管理Golang程序</title>
    <link href="https://jiawea.github.io/2020/06/20/Supervisor/"/>
    <id>https://jiawea.github.io/2020/06/20/Supervisor/</id>
    <published>2020-06-20T02:47:23.000Z</published>
    <updated>2020-11-20T01:46:42.717Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h3><p>Supervisor是用Python开发的一套通用的进程管理程序，能将一个普通的命令行进程变为后台<code>daemon</code>，并监控进程状态，异常退出时能自动重启。</p><h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h3><p>由于使用Python开发的，所以我们可以用<code>pip</code>来安装。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install supervisor</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>如果是 Ubuntu 系统，还可以使用 apt-get 安装。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install supervisor</span><br></pre></td></tr></table></figure></p><h3 id="3-配置"><a href="#3-配置" class="headerlink" title="3.配置"></a>3.配置</h3><p>安装完 supervisor 之后，可以运行echo_supervisord_conf 命令输出默认的配置项，也可以重定向到一个配置文件里:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo_supervisord_conf &gt; /etc/supervisord.conf</span><br></pre></td></tr></table></figure></p><p>打开配置文件，主要修改最后两行内容，设置配置文件目录并将注释去掉。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/supervisord.conf</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[unix_http_server]</span><br><span class="line">···</span><br><span class="line">···</span><br><span class="line"></span><br><span class="line">; 包含其他的配置文件</span><br><span class="line">[include]</span><br><span class="line">files = /etc/supervisor/*.ini</span><br></pre></td></tr></table></figure><p>创建放置配置文件的目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /etc/supervisor</span><br></pre></td></tr></table></figure></p><p>在目录<code>/etc/supervisor</code>下新建配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/supervisor/demo.ini</span><br></pre></td></tr></table></figure></p><p>并添加内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[program:demo]</span><br><span class="line">directory = /home/demo</span><br><span class="line">command = ./demo.app</span><br><span class="line">autostart = true</span><br><span class="line">startsecs = 5                                                  ; 5 秒后没有异常退出，就当作已经正常启动了</span><br><span class="line">autorestart = true                                             ; 程序异常退出后自动重启</span><br><span class="line">startretries = 3                                               ; 启动失败自动重试次数，默认是 3</span><br><span class="line">user = root                                                    ; 启动用户</span><br><span class="line">redirect_stderr = true                                         ; 把 stderr 重定向到 stdout，默认 false</span><br><span class="line">stdout_logfile_maxbytes = 50MB                                 ; stdout 日志文件大小，默认 50MB</span><br><span class="line">stdout_logfile_backups = 20                                    ; stdout 日志文件备份数</span><br><span class="line">stdout_logfile = /home/demo/log/supervisor/run.log            ; 需要事先创建好目录，否则会启动失败</span><br><span class="line">stderr_logfile = /home/demo/log/supervisor/run.err.log        ; 需要事先创建好目录，否则会启动失败</span><br></pre></td></tr></table></figure></p><p>运行<code>supervisor</code>，到这里就部署完成了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisord -c /etc/supervisord.conf</span><br></pre></td></tr></table></figure></p><p>查看<code>demo</code>是否运行成功。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl status demo</span><br></pre></td></tr></table></figure></p><h3 id="4-常用命令"><a href="#4-常用命令" class="headerlink" title="4.常用命令"></a>4.常用命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl status        # 查看所有进程的状态</span><br><span class="line">supervisorctl stop all       # 停止所有</span><br><span class="line">supervisorctl start all      #　启动所有</span><br><span class="line">supervisorctl restart       # 重启</span><br><span class="line">supervisorctl update        # 配置文件修改后使用该命令加载新的配置</span><br><span class="line">supervisorctl reload        # 重新启动配置中的所有程序</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-介绍&quot;&gt;&lt;a href=&quot;#1-介绍&quot; class=&quot;headerlink&quot; title=&quot;1.介绍&quot;&gt;&lt;/a&gt;1.介绍&lt;/h3&gt;&lt;p&gt;Supervisor是用Python开发的一套通用的进程管理程序，能将一个普通的命令行进程变为后台&lt;code&gt;daemon&lt;/code&gt;，并监控进程状态，异常退出时能自动重启。&lt;/p&gt;
&lt;h3 id=&quot;2-安装&quot;&gt;&lt;a href=&quot;#2-安装&quot; class=&quot;headerlink&quot; title=&quot;2.安装&quot;&gt;&lt;/a&gt;2.安装&lt;/h3&gt;&lt;p&gt;由于使用Python开发的，所以我们可以用&lt;code&gt;pip&lt;/code&gt;来安装。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo pip install supervisor&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="后端" scheme="https://jiawea.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Golang" scheme="https://jiawea.github.io/tags/Golang/"/>
    
      <category term="Supervisor" scheme="https://jiawea.github.io/tags/Supervisor/"/>
    
  </entry>
  
  <entry>
    <title>Golang的值类型和引用类型</title>
    <link href="https://jiawea.github.io/2020/05/27/Go_variable/"/>
    <id>https://jiawea.github.io/2020/05/27/Go_variable/</id>
    <published>2020-05-27T01:00:26.000Z</published>
    <updated>2020-11-20T01:47:28.918Z</updated>
    
    <content type="html"><![CDATA[<h3 id="值类型和引用类型"><a href="#值类型和引用类型" class="headerlink" title="值类型和引用类型"></a>值类型和引用类型</h3><ul><li>值类型：变量直接存储，内存通常在栈中分配。</li><li>引用类型：变量存储的是一个地址，这个地址存储最终的值。内存通常在堆上分配。通过GC回收</li></ul><p>PS : 通常在函数中转入指针效率比较高，因为方法中的参数是需要进行拷贝的，拷贝指针的效率比较高，要是一个大的接口体的话拷贝的效率就比较低</p><a id="more"></a><h3 id="GoLang中的值类型和引用类型"><a href="#GoLang中的值类型和引用类型" class="headerlink" title="GoLang中的值类型和引用类型"></a>GoLang中的值类型和引用类型</h3><ol><li>值类型 ： 基本数据类型int、float、bool、string以及数组和struct。</li><li>引用类型：指针、slice、map、chan等都是引用类型</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;值类型和引用类型&quot;&gt;&lt;a href=&quot;#值类型和引用类型&quot; class=&quot;headerlink&quot; title=&quot;值类型和引用类型&quot;&gt;&lt;/a&gt;值类型和引用类型&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;值类型：变量直接存储，内存通常在栈中分配。&lt;/li&gt;
&lt;li&gt;引用类型：变量存储的是一个地址，这个地址存储最终的值。内存通常在堆上分配。通过GC回收&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PS : 通常在函数中转入指针效率比较高，因为方法中的参数是需要进行拷贝的，拷贝指针的效率比较高，要是一个大的接口体的话拷贝的效率就比较低&lt;/p&gt;
    
    </summary>
    
      <category term="后端" scheme="https://jiawea.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Golang" scheme="https://jiawea.github.io/tags/Golang/"/>
    
      <category term="值类型" scheme="https://jiawea.github.io/tags/%E5%80%BC%E7%B1%BB%E5%9E%8B/"/>
    
      <category term="引用类型" scheme="https://jiawea.github.io/tags/%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Redis类型及应用场景</title>
    <link href="https://jiawea.github.io/2020/05/24/Redis/"/>
    <id>https://jiawea.github.io/2020/05/24/Redis/</id>
    <published>2020-05-24T04:26:00.000Z</published>
    <updated>2020-11-20T01:47:47.398Z</updated>
    
    <content type="html"><![CDATA[<p>NoSQL非关系型数据库。<br>Redis支持5种数据类型：string(字符串), hash(哈希), list(双向列表), set(无序集合), zset(有序集合)</p><h3 id="1、string"><a href="#1、string" class="headerlink" title="1、string"></a>1、string</h3><p><strong>介绍</strong><br>string数据类型是最常用的、简单的key-value类型，普通的key/value存储都可以归为此类。value也可以是数字。因为是二进制安全的，所有可以将一个图片文件的内容作为string来存储。redis的string完全实现目前<code>memcached</code>的功能，并且效率更高。除了提供与memcached一样的<code>get</code>,<code>set</code>,<code>incr</code>,<code>decr</code>等操作外，还提供了下面的操作：</p><a id="more"></a><ol><li>获取字符串长度</li><li>往字符串append内容</li><li>设置和获取字符串的某一段内容</li><li>设置和获取字符串的某一位(bit)</li><li>批量设置一系列字符串的内容</li></ol><p><strong>应用场景</strong></p><ol><li>应用memcached和ckv的所有场景。字符串和数字之间存取。结构化数据需要先序列化，再set到value，取出时也需要反序列化。</li><li>可以利用INCR, INCRBY, DECR, DECRBY等指令来实现原子计数的效果。即可用来实现业务上的统计计数需求。</li><li>存放session key，实现一个分布式session系统。Redis的key可以方便地设置过期时间，用于实现session key的自动过期。验证skey时先根据uid路由到对应的redis，如取不到skey，则表示skey已过期，需要重新登录；如取到skey且校验通过则升级此skey的过期时间即可。</li><li>Set nx或SetNx，仅当key不存在时才Set。可以用来选举Master或实现分布式锁：所有Client不断尝试使用SetNx master myName抢注Master，成功的那位不断使用Expire刷新它的过期时间。如果Master挂掉了key就会失效，剩下的节点又会发生新一轮抢夺。</li><li>借助redis2.6开始支持的lua脚本，可以实现更安全的2种分布式锁：一种适用于各进程竞争但总是单个进程获取锁并处理的场景。除非原处理进程挂掉因而锁过期才会被其它进程获取到锁。无须主动解锁。通过get、expire/pexpire、setnx ex| px的lua脚本实现；一种适用于各进程竞争获取锁并处理的场景。通过set nx ex| px获取锁，用完需要通过先get判断再del释放锁，否则在锁过期之前不能获取到锁。</li><li>GetSet， 设置新值，返回旧值。比如实现一个计数器，可以用GetSet获取计数并重置为0。</li><li>GetBit/SetBit/BitOp/BitCount， BitMap的玩法，比如统计今天的独立访问用户数时，每个注册用户都有一个offset，他今天进来的话就把他那个位设为1，用BitCount就可以得出今天的总人数。</li><li>Append/SetRange/GetRange/StrLen，对文本进行扩展、替换、截取和求长度，对特定数据格式非常有用。</li></ol><p><strong>实现方式</strong><br>String在redis内部存储默认就是一个字符串，被redisObject所引用，当遇到incr,decr等操作时会转成数值型进行计算，此时<code>redisObject</code>的encoding字段为<code>int</code>。</p><h3 id="2-Hash"><a href="#2-Hash" class="headerlink" title="2. Hash"></a>2. Hash</h3><p><strong>介绍</strong><br>Hash存的是字符串和字符串值之间的映射。Hash将对象的各个属性存入Map里，可以只读取/更新对象的某些属性。</p><p>常用命令: <code>hget</code>, <code>hset</code>, <code>hgetall</code>等。</p><p><strong>应用场景</strong></p><ol><li>存放结构化数据，比如用户信息。如果存放string的方式的话，修改用户信息中某一项时，需要取出后反序列化后修改完，再序列化回去。这样不仅增大了开销，也不适用于一些可能并发操作的场合。</li><li>需要注意的是，Redis提供的<code>hgetall</code>可以直接取到全部的属性数据，但是数据过多的话，那么涉及到遍历整个内部的map操作，由于Redis是<code>单线程</code>模型，这个操作可能会比较耗时，而对其他客户端的请求完全不响应。</li></ol><p><strong>实现方式</strong><br>Hash对应的value内部实际就是一个<code>HashMap</code>，这里会有2种不同实现，这个Hash的成员比较少时Redis为了节省内存会采用类似一堆数组的方式来紧凑存储，而不会采用真正的HashMap结构，对应的<code>value redisObject</code>的encoding为<code>zipmap</code>，当成员数量增大时会自动转成真正的HashMap，此时的encoding为<code>ht</code>。</p><h3 id="3-List"><a href="#3-List" class="headerlink" title="3. List"></a>3. List</h3><p><strong>介绍</strong><br>List是一个双向链表，支持双向的pop、push，一般是FIFO(First In First Out)。<code>Blocking</code>版本的BLPop/BRPop，客户端可以阻塞在那里直到有消息到来。</p><p>按值的操作：LRem(按值删除元素)、Linsert(在某个元素插入)，复杂度是O(N)，因为List的值不唯一，所以要遍历全部元素，而Set只要O(log(N))。</p><p>按下标操作：LSet、LIndex、LRange，LTrim可限制长度，比如只保留最新N条消息。复杂度O(N),因为List是链表而不是数组，所以按下标访问其实要遍历链表，除非下标刚好是队头和队尾。</p><p>常用命令：<code>lpush</code>, <code>rpush</code>, <code>lpop</code>, <code>lrange</code>等。 </p><p><strong>应用场景</strong></p><ol><li>各自列表。比如twitter的关注列表、粉丝列表等，最新消息排行、每篇文章的评论等也可以用List结构实现。</li><li>消息队列，将任务push到List中，然后工作线程再用pop操作把任务取走。这里的消息队列并没有<code>ACK</code>机制，如果消费者把任务pop走了没处理完就死机了怎么办？解决方法之一就是多加一个<code>sorted set</code>，分发的时候同时发到<code>List</code>与<code>sorted set</code>，以分发时间为<code>score</code>，消费者把任务做完之后通过<code>ZREM</code>删除<code>sorted set</code>里的job，并且定时取出超时未完成的任务，重新放回<code>List</code>。</li><li>利用LRange可以方便的实现List内容分页的功能。</li></ol><p><strong>实现方式</strong><br>List是一个双向链表，即可以支持方向查找和遍历等操作，不过带来了部分额外的内存开销，Redis内部的很多实现，包括发送缓冲队列等也是用这个数据结构。</p><h3 id="4-Set"><a href="#4-Set" class="headerlink" title="4. Set"></a>4. Set</h3><p><strong>介绍</strong><br>Set是一种无序的集合，集合中的元素没有先后顺序，不重复。将重复的元素放入Set会自动去重。</p><p><strong>应用场景</strong></p><ol><li>某些需要去重的列表，并且set提供了判断某个元素是否存在一个set集合内的接口</li><li>存储一些集合性的数据，比如在微博中，可以将一个用户的所有关注人存在一个集合中，并将所有粉丝也存入一个集合中。Redis还提供了集合求交集、并集、差集操作。可以非常方便的实现如共同关注、共同喜好。</li></ol><p><strong>实现方式</strong><br>set的内部实现是一个value用户为<code>null</code>的HashMap，实际就是通过计算hash的方式来快速排重，这也是set能提供判断一个成员是否在这个集合内的原因。</p><h3 id="5-Sorted-Set"><a href="#5-Sorted-Set" class="headerlink" title="5. Sorted Set"></a>5. Sorted Set</h3><p><strong>介绍</strong><br>有序集合，相比Set，元素放入集合时还要提供该元素的分数，可根据分数自动排序。</p><p><strong>应用场景</strong></p><ol><li>存放一个有序的并且不重复的集合列表，比如twitter的pubilc timeline可以以发表时间作为score来存储，这样获取时就是自动按时间排好序的。</li><li>可以做带权重的队列，比如普通消息的<code>score</code>为1，重要消息的score为2，然后工作线程可以按score的倒序来获取工作任务，然重要的先执行。</li></ol><p><strong>实现方式</strong><br>sorted set的内部使用HashMap和跳跃表(SkipList)来保证数据的存储和有序，HashMap里放的是成员到score的映射，而跳跃表里存放的是所有的成员，排序依据是HashMap里存的score，使用跳跃表的结构可以获取比较高的查找效率。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NoSQL非关系型数据库。&lt;br&gt;Redis支持5种数据类型：string(字符串), hash(哈希), list(双向列表), set(无序集合), zset(有序集合)&lt;/p&gt;
&lt;h3 id=&quot;1、string&quot;&gt;&lt;a href=&quot;#1、string&quot; class=&quot;headerlink&quot; title=&quot;1、string&quot;&gt;&lt;/a&gt;1、string&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;介绍&lt;/strong&gt;&lt;br&gt;string数据类型是最常用的、简单的key-value类型，普通的key/value存储都可以归为此类。value也可以是数字。因为是二进制安全的，所有可以将一个图片文件的内容作为string来存储。redis的string完全实现目前&lt;code&gt;memcached&lt;/code&gt;的功能，并且效率更高。除了提供与memcached一样的&lt;code&gt;get&lt;/code&gt;,&lt;code&gt;set&lt;/code&gt;,&lt;code&gt;incr&lt;/code&gt;,&lt;code&gt;decr&lt;/code&gt;等操作外，还提供了下面的操作：&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://jiawea.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="redis" scheme="https://jiawea.github.io/tags/redis/"/>
    
      <category term="NoSQL" scheme="https://jiawea.github.io/tags/NoSQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL优化之SQL优化</title>
    <link href="https://jiawea.github.io/2020/05/08/MySQL/"/>
    <id>https://jiawea.github.io/2020/05/08/MySQL/</id>
    <published>2020-05-08T01:30:18.000Z</published>
    <updated>2020-11-13T03:26:15.488Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-查询SQL尽量不要使用-select-而是select具体字段。"><a href="#1-查询SQL尽量不要使用-select-而是select具体字段。" class="headerlink" title="1 查询SQL尽量不要使用 select * ,而是select具体字段。"></a>1 查询SQL尽量不要使用 <code>select *</code> ,而是<code>select</code>具体字段。</h3><p>反例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from employee;</span><br></pre></td></tr></table></figure></p><p>正例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id, name from employee;</span><br></pre></td></tr></table></figure></p><p>说明:</p><ol><li>只取需要的字段，节省资源、减少网络开销。</li><li>select * 进行查询时，很可能就不会使用到覆盖索引了，就会造成回表查询。</li></ol><a id="more"></a><h3 id="2-如果只查询结果只有一条的数据或者最大、最小一条记录，使用limit"><a href="#2-如果只查询结果只有一条的数据或者最大、最小一条记录，使用limit" class="headerlink" title="2 如果只查询结果只有一条的数据或者最大、最小一条记录，使用limit"></a>2 如果只查询结果只有一条的数据或者最大、最小一条记录，使用limit</h3><p>假如有employee员工表，要找出一个名字叫ray的人<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE  `employee`(</span><br><span class="line">  `id` int (11) NOT NULL,</span><br><span class="line">  `name` varchar(255) DEFAULT NULL,</span><br><span class="line">  `age` int(11) DEFAULT NULL,</span><br><span class="line">  `date` datetime DEFAULT NULL,</span><br><span class="line">  `sex` int (1) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure></p><p>反例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id, name from employee where name=&apos;ray&apos;</span><br></pre></td></tr></table></figure></p><p>正例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id, name from employee where name=&apos;ray&apos; limit 1;</span><br></pre></td></tr></table></figure></p><p>说明：</p><ol><li>加上limit 1后,只要找到了对应的一条记录,就不会继续向下扫描了,效率将会大大提高。</li><li>当然，如果name是唯一索引的话，是不必要加上limit 1了，因为limit的存在主要就是为了防止全表扫描，从而提高性能,如果一个语句本身可以预知不用全表扫描，有没有limit ，性能的差别并不大。</li></ol><h3 id="3-批量插入"><a href="#3-批量插入" class="headerlink" title="3 批量插入"></a>3 批量插入</h3><p>反例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSERT into person(name,age) values(&apos;A&apos;,24)</span><br><span class="line">INSERT into person(name,age) values(&apos;B&apos;,24)</span><br><span class="line">INSERT into person(name,age) values(&apos;C&apos;,24)</span><br></pre></td></tr></table></figure></p><p>正例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT into person(name,age) values(&apos;A&apos;,24),(&apos;B&apos;,24),(&apos;C&apos;,24);</span><br></pre></td></tr></table></figure></p><p>说明:</p><ol><li>比较常规，就不多做说明了</li></ol><h3 id="4-优化like语句"><a href="#4-优化like语句" class="headerlink" title="4 优化like语句"></a>4 优化like语句</h3><p>尽量使用右模糊<code>xxx%</code>代替左模糊或者全模糊</p><p>反例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select userId, name from user where user_id like &apos;%123&apos;;</span><br><span class="line">select userId, name from user where user_id like &apos;%123%&apos;;</span><br></pre></td></tr></table></figure></p><p>正例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select userId, name from user where user_id like &apos;123%&apos;;</span><br></pre></td></tr></table></figure></p><h3 id="5-避免SQL中对where字段进行函数转换或表达式计算"><a href="#5-避免SQL中对where字段进行函数转换或表达式计算" class="headerlink" title="5 避免SQL中对where字段进行函数转换或表达式计算"></a>5 避免SQL中对where字段进行函数转换或表达式计算</h3><p>反例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from employee where user_id + 1 = 15551;</span><br></pre></td></tr></table></figure></p><p>正例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from employee where user_id  = 15550;</span><br></pre></td></tr></table></figure></p><p>说明：</p><ol><li>将导致系统放弃使用索引而进行全表扫</li><li>其实在知道了有SQL优化器之后，我个人感觉这种普通的表达式转换应该可以提前进行处理再进行查询，这样一来就可以用到索引了，但是问题又来了，如果mysql优化器可以提前计算出结果，那么写sql语句的人也一定可以提前计算出结果，所以矛盾点在这个地方，导致5.7版本以前的此种情况都无法使用索引吧，未来可能会对其进行优化</li></ol><h3 id="6-超大分页场景解决方案-limit"><a href="#6-超大分页场景解决方案-limit" class="headerlink" title="6 超大分页场景解决方案(limit)"></a>6 超大分页场景解决方案(limit)</h3><p>我们日常做分页需求时，一般会用 limit 实现，但是当偏移量特别大的时候，查询效率就变得低下。</p><p>反例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id, name, age from employee LIMIT 1000000, 10;</span><br></pre></td></tr></table></figure></p><p>正例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 方案一：返回上次查询的最大记录（偏移量）</span><br><span class="line">select id, name, age from employee id &gt; 1000000 limit 10;</span><br><span class="line"></span><br><span class="line">// 方案二：先通过索引查询需要的id</span><br><span class="line">select id, name, age from employee a, (select id from employee limit 1000000, 10) b where a.id = b.id;</span><br><span class="line"></span><br><span class="line">// 方案三：order by + 索引</span><br><span class="line">select id, name, age from employee order by id limit 1000000, 10</span><br></pre></td></tr></table></figure></p><p>说明：</p><ol><li>MySQL 并不是跳过 offset 行，而是取 offset+N 行，然后返回放弃前 offset 行，返回 N 行，那当 offset 特别大的时候，效率就非常的低下，要么控制返回的总页数，要么对超过特定阈值的页数进行 SQL 改写</li></ol><h3 id="7-尽量避免在where子句中使用-或-lt-gt-操作符，否则将引擎放弃使用索引而进行全表扫描。"><a href="#7-尽量避免在where子句中使用-或-lt-gt-操作符，否则将引擎放弃使用索引而进行全表扫描。" class="headerlink" title="7 尽量避免在where子句中使用!=或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描。"></a>7 尽量避免在where子句中使用!=或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描。</h3><p>反例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select age, name from user where age &lt;&gt; 18;</span><br></pre></td></tr></table></figure></p><p>正例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 可以考虑分开两条sql写</span><br><span class="line">select age, name from user where age &lt; 18;</span><br><span class="line">select age, name from user where age &gt; 18;</span><br></pre></td></tr></table></figure></p><p>说明：</p><ol><li>使用!=和&lt;&gt;很可能会让索引失效</li></ol><h3 id="8-对查询进行优化，应考虑在where及order-by涉及的列上建立索引，尽量避免全表扫描。"><a href="#8-对查询进行优化，应考虑在where及order-by涉及的列上建立索引，尽量避免全表扫描。" class="headerlink" title="8 对查询进行优化，应考虑在where及order by涉及的列上建立索引，尽量避免全表扫描。"></a>8 对查询进行优化，应考虑在where及order by涉及的列上建立索引，尽量避免全表扫描。</h3><p>对经常使用where和order by的字段加上索引</p><h3 id="9-where子句中考虑使用默认值代替null。"><a href="#9-where子句中考虑使用默认值代替null。" class="headerlink" title="9 where子句中考虑使用默认值代替null。"></a>9 where子句中考虑使用默认值代替null。</h3><p>反例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user where age is not null;</span><br></pre></td></tr></table></figure></p><p>正例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 设置默认值为 0 </span><br><span class="line">select * from user where age &gt; 0;</span><br></pre></td></tr></table></figure></p><p>说明：</p><ol><li>并不是说使用了is null 或者 is not null 就会不走索引了，这个跟mysql版本以及查询成本都有关。</li><li>如果把null值，换成默认值，很多时候让走索引成为可能，同时，表达意思会相对清晰一点。</li></ol><h3 id="10-索引不宜太多，一般5个以内"><a href="#10-索引不宜太多，一般5个以内" class="headerlink" title="10 索引不宜太多，一般5个以内"></a>10 索引不宜太多，一般5个以内</h3><p>说明：</p><ol><li>索引并不是越多越好，索引虽然提高了查询的效率，但是也降低了插入和更新的效率。</li><li>insert或update时有可能会重建索引，所以建索引需要慎重考虑，视具体情况来定。</li><li>一个表的索引数最好不要超过5个，若太多需要考虑一些索引是否没有存在的必要。</li></ol><p>###　11 索引不适合建在有大量重复数据的字段上，如性别这类型数据库字段</p><p>说明：</p><ol><li>因为SQL优化器是根据表中数据量来进行查询优化的，如果索引列有大量重复数据，Mysql查询优化器推算发现不走索引的成本更低，很可能就放弃索引了。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-查询SQL尽量不要使用-select-而是select具体字段。&quot;&gt;&lt;a href=&quot;#1-查询SQL尽量不要使用-select-而是select具体字段。&quot; class=&quot;headerlink&quot; title=&quot;1 查询SQL尽量不要使用 select * ,而是select具体字段。&quot;&gt;&lt;/a&gt;1 查询SQL尽量不要使用 &lt;code&gt;select *&lt;/code&gt; ,而是&lt;code&gt;select&lt;/code&gt;具体字段。&lt;/h3&gt;&lt;p&gt;反例：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;select * from employee;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;正例：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;select id, name from employee;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;说明:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;只取需要的字段，节省资源、减少网络开销。&lt;/li&gt;
&lt;li&gt;select * 进行查询时，很可能就不会使用到覆盖索引了，就会造成回表查询。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://jiawea.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL" scheme="https://jiawea.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL性能调优</title>
    <link href="https://jiawea.github.io/2020/05/08/MySQL_performance/"/>
    <id>https://jiawea.github.io/2020/05/08/MySQL_performance/</id>
    <published>2020-05-08T01:30:18.000Z</published>
    <updated>2020-11-24T02:17:32.782Z</updated>
    
    <content type="html"><![CDATA[<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li><a href="#服务器硬件的优化">服务器硬件的优化</a></li><li><a href="#MySQL数据库配置优化">MySQL数据库配置优化</a></li><li><a href="#MySQL的参数配置">MySQL的参数配置</a></li></ul><h3 id="服务器硬件的优化"><a href="#服务器硬件的优化" class="headerlink" title="服务器硬件的优化"></a>服务器硬件的优化</h3><p>提升硬件设备，例如选择尽量高频率的内存（频率不能高于主板的支持）、提升网络带宽、使用SSD高速磁盘、提升CPU性能等。</p><p>CPU的选择:</p><ul><li>对于数据库并发比较高的场景，CPU的数量比频率重要。</li><li>对于CPU密集型场景和频繁执行复杂SQL的场景，CPU的频率越高越好。</li></ul><a id="more"></a><h3 id="MySQL数据库配置优化"><a href="#MySQL数据库配置优化" class="headerlink" title="MySQL数据库配置优化"></a>MySQL数据库配置优化</h3><h3 id="MySQL的参数配置"><a href="#MySQL的参数配置" class="headerlink" title="MySQL的参数配置"></a>MySQL的参数配置</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#服务器硬件的优化&quot;&gt;服务器硬件的优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#MySQL数据库配置优化&quot;&gt;MySQL数据库配置优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#MySQL的参数配置&quot;&gt;MySQL的参数配置&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;服务器硬件的优化&quot;&gt;&lt;a href=&quot;#服务器硬件的优化&quot; class=&quot;headerlink&quot; title=&quot;服务器硬件的优化&quot;&gt;&lt;/a&gt;服务器硬件的优化&lt;/h3&gt;&lt;p&gt;提升硬件设备，例如选择尽量高频率的内存（频率不能高于主板的支持）、提升网络带宽、使用SSD高速磁盘、提升CPU性能等。&lt;/p&gt;
&lt;p&gt;CPU的选择:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于数据库并发比较高的场景，CPU的数量比频率重要。&lt;/li&gt;
&lt;li&gt;对于CPU密集型场景和频繁执行复杂SQL的场景，CPU的频率越高越好。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://jiawea.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL" scheme="https://jiawea.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>HTTP和WebSocket协议的区别</title>
    <link href="https://jiawea.github.io/2020/04/11/Http_webSocket/"/>
    <id>https://jiawea.github.io/2020/04/11/Http_webSocket/</id>
    <published>2020-04-11T07:30:00.000Z</published>
    <updated>2020-11-24T02:17:21.522Z</updated>
    
    <content type="html"><![CDATA[<p>最近需要实现一个可以和客户端进行实时通讯的后端服务，由于后端可以主动发送消息给客户端，如果使用<code>HTTP</code>的话服务端是不能主动向客户端发送信息的，之前对<code>Socket</code>只是一个大概的了解。所以查了一些相关的资料，记录一下<code>HTTP</code>和<code>WebSocket</code>的区别。</p><a id="more"></a><h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><p>HTTP是一个Request/Response请求和响应的模式，两种类型都是由请求行、请求头、空行、请求主体四部分组成。这里将不详细介绍，可看我之前的文章。<br>只有客户端向服务端发送一个请求后，服务端才能向客户端回复，客户端在没有请求服务端时，服务端是不能主动向客户端发送数据的。</p><h4 id="短连接"><a href="#短连接" class="headerlink" title="短连接"></a>短连接</h4><p>举个栗子：<br>比如说客户端想实时地知道某个状态是否<strong>发生</strong>变化时，于是请求了服务端，但是服务端此时又<strong>没有发生</strong>变化。遇到这种情况下客户端只能不断地想服务端发送请求，直到返回满意的结果。这也就是我们所说的<strong>轮询</strong>。这是一个很浪费资源的，因为每个资源都需要建立一个新的连接，而HTTP底层使用的是<code>TCP</code>，每次都需要三次握手建立连接，所以会造成资源浪费。</p><p>于是由引出了一个新的概念，<code>HTTP</code>长连接，这里的长连接和<code>socket</code>的长连接是有区别的，这个稍后再说。</p><h4 id="长连接"><a href="#长连接" class="headerlink" title="长连接"></a>长连接</h4><p>所谓的长连接就是客户端向服务端发送请求，服务端不需要马上回复客户端，只有等到服务端有结果了才向客户端回复。相比上面的短连接可以减少连接次数和压力。</p><center><img src="/static/blogImg/HTTP_connect.png" alt="avatar">WebSocket.png</center><p>在一个TCP连接上也可以传输多个Request/Response消息对，但是HTTP的基本模型还是一个Request对应一个Response。</p><h3 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h3><p>WebSocket 协议在2008年诞生，2011年成为国际标准。所有浏览器都已经支持了。</p><p>它的最大特点就是，服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息，是真正的双向平等对话，属于服务器推送技术的一种。</p><center><img src="/static/blogImg/WebSocket.png" alt="avatar"></center><p>其他特点包括：</p><ol><li>建立在 TCP 协议之上，服务器端的实现比较容易。</li><li>与 HTTP 协议有着良好的兼容性。默认端口也是80和443，并且握手阶段采用 HTTP 协议，因此不容易屏蔽，能通过各种 HTTP 代理服务器。</li><li>数据格式比较轻量，性能开销小，通信高效。</li><li>可以发送文本，也可以发送二进制数据。</li><li>没有同源限制，客户端可以与任意服务器通信。</li><li>协议标识符是ws（如果加密，则为wss），服务器网址就是 URL。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ws://example.com:80/some/path</span><br></pre></td></tr></table></figure><center><img src="/static/blogImg/tcp_http_ws.png" alt="avatar"></center><h4 id="WebSocket协议的规范"><a href="#WebSocket协议的规范" class="headerlink" title="WebSocket协议的规范"></a>WebSocket协议的规范</h4><p>以下是一个典型的WebSocket发起请求到响应请求的示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">客户端到服务端：</span><br><span class="line">GET / HTTP/1.1</span><br><span class="line">Connection:Upgrade</span><br><span class="line">Host:127.0.0.1:8088</span><br><span class="line">Origin:null</span><br><span class="line">Sec-WebSocket-Extensions:x-webkit-deflate-frame</span><br><span class="line">Sec-WebSocket-Key:puVOuWb7rel6z2AVZBKnfw==</span><br><span class="line">Sec-WebSocket-Version:13</span><br><span class="line">Upgrade:websocket</span><br><span class="line"></span><br><span class="line">服务端到客户端：</span><br><span class="line">HTTP/1.1 101 Switching Protocols</span><br><span class="line">Connection:Upgrade</span><br><span class="line">Server:beetle websocket server</span><br><span class="line">Upgrade:WebSocket</span><br><span class="line">date: Thu, 10 May 2018 07:32:25 GMT</span><br><span class="line">Access-Control-Allow-Credentials:true</span><br><span class="line">Access-Control-Allow-Headers:content-type</span><br><span class="line">Sec-WebSocket-Accept:FCKgUr8c7OsDsLFeJTWrJw6WO8Q=</span><br></pre></td></tr></table></figure></p><p>我们可以看到，WebSocket协议和HTTP协议乍看并没有太大的区别，但细看下来，区别还是有些的，这其实是一个握手的http请求，首先请求和响应的，”Upgrade:WebSocket”表示请求的目的就是要将客户端和服务器端的通讯协议从 HTTP 协议升级到 WebSocket协议。从客户端到服务器端请求的信息里包含有”Sec-WebSocket-Extensions”、“Sec-WebSocket-Key”这样的头信息。这是客户端浏览器需要向服务器端提供的握手信息，服务器端解析这些头信息，并在握手的过程中依据这些信息生成一个28位的安全密钥并返回给客户端，以表明服务器端获取了客户端的请求，同意创建 WebSocket 连接。</p><p>当握手成功后，这个时候TCP连接就已经建立了，客户端与服务端就能够直接通过WebSocket直接进行数据传递。不过服务端还需要判断一次数据请求是什么时候开始的和什么时候是请求的结束的。在WebSocket中，由于浏览端和服务端已经打好招呼，如我发送的内容为utf-8编码，如果我发送0x00,表示包的开始，如果发送了0xFF，就表示包的结束了。这就解决了黏包的问题。</p><h4 id="与HTTP的相同点"><a href="#与HTTP的相同点" class="headerlink" title="与HTTP的相同点"></a>与HTTP的相同点</h4><ol><li>都是基于TCP的应用层协议。</li><li>都使用Request/Response模型进行连接的建立。</li><li>在连接的建立过程中对错误的处理方式相同，在这个阶段WS可能返回和HTTP相同的返回码。</li><li>都可以在网络中传输数据。</li></ol><h4 id="与HTTP的不同点"><a href="#与HTTP的不同点" class="headerlink" title="与HTTP的不同点"></a>与HTTP的不同点</h4><ol><li>WS使用HTTP来建立连接，但是定义了一系列新的header域，这些域在HTTP中并不会使用。</li><li>WS的连接不能通过中间人来转发，它必须是一个直接连接。</li><li>WS连接建立之后，通信双方都可以在任何时刻向另一方发送数据。</li><li>WS连接建立之后，数据的传输使用帧来传递，不再需要Request消息。</li><li>WS的数据帧有序。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近需要实现一个可以和客户端进行实时通讯的后端服务，由于后端可以主动发送消息给客户端，如果使用&lt;code&gt;HTTP&lt;/code&gt;的话服务端是不能主动向客户端发送信息的，之前对&lt;code&gt;Socket&lt;/code&gt;只是一个大概的了解。所以查了一些相关的资料，记录一下&lt;code&gt;HTTP&lt;/code&gt;和&lt;code&gt;WebSocket&lt;/code&gt;的区别。&lt;/p&gt;
    
    </summary>
    
      <category term="网络" scheme="https://jiawea.github.io/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="HTTP" scheme="https://jiawea.github.io/tags/HTTP/"/>
    
      <category term="WebSocket" scheme="https://jiawea.github.io/tags/WebSocket/"/>
    
      <category term="TCP" scheme="https://jiawea.github.io/tags/TCP/"/>
    
  </entry>
  
</feed>
